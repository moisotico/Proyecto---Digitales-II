`include "serialtopar.v"
`include "byte_unstripping.v"
`include "demux.v"
module phy_rx(
    input clk_2f,
    input ck_8f,
    input clk_f,
    input reset_L,
    input [7:0] in_0,
    input [7:0] in_1,
    output reg [7:0] data_out_0,
    output reg [7:0] data_out_1,
);
/*AUTOWIRE*/
// Beginning of automatic wires (for undeclared instantiated-module outputs)
wire [7:0]		data_par_1;
wire			valid_par_1;
wire [7:0]		data_par_0;
wire			valid_par_0;
// End of automatics
// wire clk_2f;
// wire clk_f;
// wire out_0;
// wire out_1;

always @(posedge clk_2f) begin
    if(~reset_L) begin
        data_out_0<='b0;
        data_out_1<='b0;
    end else begin
        data_out_0<=data_demux_0;
        data_out_1<=data_demux_1;
    end
end
// always @(posedge clk_8f) begin
//     if(~reset_L) begin
//         tx_out_0_cond <= 0;
//         tx_out_1_cond <= 0;
//     end else begin
//         tx_out_0_cond <= out_0;
//         tx_out_1_cond <= out_1;
//     end
// end
serialtopar line0(/*AUTOINST*/
		  // Outputs
		  .data_par		(data_par_0[7:0]),
		  .valid_par		(valid_par_0),
		  // Inputs
		  .clk_f		(clk_f),
		  .clk_8f		(clk_8f),
		  .reset_L		(reset_L),
		  .in			(in_0));
serialtopar line0(/*AUTOINST*/
		  // Outputs
		  .data_par		(data_par_1[7:0]),
		  .valid_par		(valid_par_1),
		  // Inputs
		  .clk_f		(clk_f),
		  .clk_8f		(clk_8f),
		  .reset_L		(reset_L),
		  .in			(in_1));
byte_unstripping byte_uns(/*AUTOINST*/);
demux demux0(/*AUTOINST*/);



endmodule
