/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 5.4.0-6ubuntu1~16.04.4 -O2 -fstack-protector-strong -fPIC -Os) */

(* src = "bs_synth.v:1" *)
module bs_synth(data_mux_synth, valid_mux_synth, reset_L, clk_2f, data_stripe_0, valid_stripe_0, data_stripe_1, valid_stripe_1);
  (* src = "bs_synth.v:67" *)
  wire [7:0] _000_;
  (* src = "bs_synth.v:67" *)
  wire [7:0] _001_;
  (* src = "bs_synth.v:67" *)
  wire _002_;
  (* src = "bs_synth.v:67" *)
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  (* src = "bs_synth.v:5" *)
  input clk_2f;
  (* src = "bs_synth.v:2" *)
  input [7:0] data_mux_synth;
  (* src = "bs_synth.v:6" *)
  output [7:0] data_stripe_0;
  (* src = "bs_synth.v:8" *)
  output [7:0] data_stripe_1;
  (* src = "bs_synth.v:13" *)
  wire [7:0] l0;
  (* src = "bs_synth.v:14" *)
  wire [7:0] l1;
  (* src = "bs_synth.v:4" *)
  input reset_L;
  (* src = "bs_synth.v:11" *)
  wire selector;
  (* src = "bs_synth.v:3" *)
  input valid_mux_synth;
  (* src = "bs_synth.v:7" *)
  output valid_stripe_0;
  (* src = "bs_synth.v:9" *)
  output valid_stripe_1;
  (* src = "bs_synth.v:12" *)
  wire validflop;
  NOR _077_ (
    .A(l1[1]),
    .B(selector),
    .Y(_049_)
  );
  NOT _078_ (
    .A(data_mux_synth[1]),
    .Y(_050_)
  );
  NAND _079_ (
    .A(_050_),
    .B(selector),
    .Y(_051_)
  );
  NAND _080_ (
    .A(_051_),
    .B(reset_L),
    .Y(_052_)
  );
  NOR _081_ (
    .A(_052_),
    .B(_049_),
    .Y(data_stripe_1[1])
  );
  NOR _082_ (
    .A(l1[2]),
    .B(selector),
    .Y(_053_)
  );
  NOT _083_ (
    .A(data_mux_synth[2]),
    .Y(_054_)
  );
  NAND _084_ (
    .A(_054_),
    .B(selector),
    .Y(_055_)
  );
  NAND _085_ (
    .A(_055_),
    .B(reset_L),
    .Y(_056_)
  );
  NOR _086_ (
    .A(_056_),
    .B(_053_),
    .Y(data_stripe_1[2])
  );
  NOR _087_ (
    .A(l1[3]),
    .B(selector),
    .Y(_057_)
  );
  NOT _088_ (
    .A(data_mux_synth[3]),
    .Y(_058_)
  );
  NAND _089_ (
    .A(_058_),
    .B(selector),
    .Y(_059_)
  );
  NAND _090_ (
    .A(_059_),
    .B(reset_L),
    .Y(_060_)
  );
  NOR _091_ (
    .A(_060_),
    .B(_057_),
    .Y(data_stripe_1[3])
  );
  NOR _092_ (
    .A(l1[4]),
    .B(selector),
    .Y(_061_)
  );
  NOT _093_ (
    .A(data_mux_synth[4]),
    .Y(_062_)
  );
  NAND _094_ (
    .A(_062_),
    .B(selector),
    .Y(_063_)
  );
  NAND _095_ (
    .A(_063_),
    .B(reset_L),
    .Y(_064_)
  );
  NOR _096_ (
    .A(_064_),
    .B(_061_),
    .Y(data_stripe_1[4])
  );
  NOR _097_ (
    .A(l1[5]),
    .B(selector),
    .Y(_065_)
  );
  NOT _098_ (
    .A(data_mux_synth[5]),
    .Y(_066_)
  );
  NAND _099_ (
    .A(_066_),
    .B(selector),
    .Y(_067_)
  );
  NAND _100_ (
    .A(_067_),
    .B(reset_L),
    .Y(_068_)
  );
  NOR _101_ (
    .A(_068_),
    .B(_065_),
    .Y(data_stripe_1[5])
  );
  NOR _102_ (
    .A(l1[6]),
    .B(selector),
    .Y(_069_)
  );
  NOT _103_ (
    .A(data_mux_synth[6]),
    .Y(_070_)
  );
  NAND _104_ (
    .A(_070_),
    .B(selector),
    .Y(_071_)
  );
  NAND _105_ (
    .A(_071_),
    .B(reset_L),
    .Y(_072_)
  );
  NOR _106_ (
    .A(_072_),
    .B(_069_),
    .Y(data_stripe_1[6])
  );
  NOR _107_ (
    .A(l1[7]),
    .B(selector),
    .Y(_073_)
  );
  NOT _108_ (
    .A(data_mux_synth[7]),
    .Y(_074_)
  );
  NAND _109_ (
    .A(_074_),
    .B(selector),
    .Y(_075_)
  );
  NAND _110_ (
    .A(_075_),
    .B(reset_L),
    .Y(_076_)
  );
  NOR _111_ (
    .A(_076_),
    .B(_073_),
    .Y(data_stripe_1[7])
  );
  NOT _112_ (
    .A(reset_L),
    .Y(_004_)
  );
  NOT _113_ (
    .A(selector),
    .Y(_005_)
  );
  NOT _114_ (
    .A(l0[0]),
    .Y(_006_)
  );
  NOR _115_ (
    .A(_006_),
    .B(_005_),
    .Y(_007_)
  );
  NOT _116_ (
    .A(data_mux_synth[0]),
    .Y(_008_)
  );
  NOR _117_ (
    .A(_008_),
    .B(selector),
    .Y(_009_)
  );
  NOR _118_ (
    .A(_009_),
    .B(_007_),
    .Y(_010_)
  );
  NOR _119_ (
    .A(_010_),
    .B(_004_),
    .Y(data_stripe_0[0])
  );
  NOT _120_ (
    .A(l0[1]),
    .Y(_011_)
  );
  NOR _121_ (
    .A(_011_),
    .B(_005_),
    .Y(_012_)
  );
  NOR _122_ (
    .A(_050_),
    .B(selector),
    .Y(_013_)
  );
  NOR _123_ (
    .A(_013_),
    .B(_012_),
    .Y(_014_)
  );
  NOR _124_ (
    .A(_014_),
    .B(_004_),
    .Y(data_stripe_0[1])
  );
  NOT _125_ (
    .A(l0[2]),
    .Y(_015_)
  );
  NOR _126_ (
    .A(_015_),
    .B(_005_),
    .Y(_016_)
  );
  NOR _127_ (
    .A(_054_),
    .B(selector),
    .Y(_017_)
  );
  NOR _128_ (
    .A(_017_),
    .B(_016_),
    .Y(_018_)
  );
  NOR _129_ (
    .A(_018_),
    .B(_004_),
    .Y(data_stripe_0[2])
  );
  NOT _130_ (
    .A(l0[3]),
    .Y(_019_)
  );
  NOR _131_ (
    .A(_019_),
    .B(_005_),
    .Y(_020_)
  );
  NOR _132_ (
    .A(_058_),
    .B(selector),
    .Y(_021_)
  );
  NOR _133_ (
    .A(_021_),
    .B(_020_),
    .Y(_022_)
  );
  NOR _134_ (
    .A(_022_),
    .B(_004_),
    .Y(data_stripe_0[3])
  );
  NOT _135_ (
    .A(l0[4]),
    .Y(_023_)
  );
  NOR _136_ (
    .A(_023_),
    .B(_005_),
    .Y(_024_)
  );
  NOR _137_ (
    .A(_062_),
    .B(selector),
    .Y(_025_)
  );
  NOR _138_ (
    .A(_025_),
    .B(_024_),
    .Y(_026_)
  );
  NOR _139_ (
    .A(_026_),
    .B(_004_),
    .Y(data_stripe_0[4])
  );
  NOT _140_ (
    .A(l0[5]),
    .Y(_027_)
  );
  NOR _141_ (
    .A(_027_),
    .B(_005_),
    .Y(_028_)
  );
  NOR _142_ (
    .A(_066_),
    .B(selector),
    .Y(_029_)
  );
  NOR _143_ (
    .A(_029_),
    .B(_028_),
    .Y(_030_)
  );
  NOR _144_ (
    .A(_030_),
    .B(_004_),
    .Y(data_stripe_0[5])
  );
  NOT _145_ (
    .A(l0[6]),
    .Y(_031_)
  );
  NOR _146_ (
    .A(_031_),
    .B(_005_),
    .Y(_032_)
  );
  NOR _147_ (
    .A(_070_),
    .B(selector),
    .Y(_033_)
  );
  NOR _148_ (
    .A(_033_),
    .B(_032_),
    .Y(_034_)
  );
  NOR _149_ (
    .A(_034_),
    .B(_004_),
    .Y(data_stripe_0[6])
  );
  NOT _150_ (
    .A(l0[7]),
    .Y(_035_)
  );
  NOR _151_ (
    .A(_035_),
    .B(_005_),
    .Y(_036_)
  );
  NOR _152_ (
    .A(_074_),
    .B(selector),
    .Y(_037_)
  );
  NOR _153_ (
    .A(_037_),
    .B(_036_),
    .Y(_038_)
  );
  NOR _154_ (
    .A(_038_),
    .B(_004_),
    .Y(data_stripe_0[7])
  );
  NOT _155_ (
    .A(valid_mux_synth),
    .Y(_039_)
  );
  NOR _156_ (
    .A(_039_),
    .B(_004_),
    .Y(_003_)
  );
  NOR _157_ (
    .A(selector),
    .B(_004_),
    .Y(_002_)
  );
  NOR _158_ (
    .A(selector),
    .B(validflop),
    .Y(_040_)
  );
  NOR _159_ (
    .A(_003_),
    .B(_002_),
    .Y(_041_)
  );
  NOR _160_ (
    .A(_041_),
    .B(_040_),
    .Y(valid_stripe_1)
  );
  NOR _161_ (
    .A(l1[0]),
    .B(selector),
    .Y(_042_)
  );
  NAND _162_ (
    .A(_008_),
    .B(selector),
    .Y(_043_)
  );
  NAND _163_ (
    .A(_043_),
    .B(reset_L),
    .Y(_044_)
  );
  NOR _164_ (
    .A(_044_),
    .B(_042_),
    .Y(data_stripe_1[0])
  );
  NOT _165_ (
    .A(validflop),
    .Y(_045_)
  );
  NOR _166_ (
    .A(_005_),
    .B(_045_),
    .Y(_046_)
  );
  NOR _167_ (
    .A(selector),
    .B(_039_),
    .Y(_047_)
  );
  NOR _168_ (
    .A(_047_),
    .B(_046_),
    .Y(_048_)
  );
  NOR _169_ (
    .A(_048_),
    .B(_004_),
    .Y(valid_stripe_0)
  );
  NOR _170_ (
    .A(_052_),
    .B(_049_),
    .Y(_001_[1])
  );
  NOR _171_ (
    .A(_056_),
    .B(_053_),
    .Y(_001_[2])
  );
  NOR _172_ (
    .A(_060_),
    .B(_057_),
    .Y(_001_[3])
  );
  NOR _173_ (
    .A(_064_),
    .B(_061_),
    .Y(_001_[4])
  );
  NOR _174_ (
    .A(_068_),
    .B(_065_),
    .Y(_001_[5])
  );
  NOR _175_ (
    .A(_072_),
    .B(_069_),
    .Y(_001_[6])
  );
  NOR _176_ (
    .A(_076_),
    .B(_073_),
    .Y(_001_[7])
  );
  NOR _177_ (
    .A(_010_),
    .B(_004_),
    .Y(_000_[0])
  );
  NOR _178_ (
    .A(_014_),
    .B(_004_),
    .Y(_000_[1])
  );
  NOR _179_ (
    .A(_018_),
    .B(_004_),
    .Y(_000_[2])
  );
  NOR _180_ (
    .A(_022_),
    .B(_004_),
    .Y(_000_[3])
  );
  NOR _181_ (
    .A(_026_),
    .B(_004_),
    .Y(_000_[4])
  );
  NOR _182_ (
    .A(_030_),
    .B(_004_),
    .Y(_000_[5])
  );
  NOR _183_ (
    .A(_034_),
    .B(_004_),
    .Y(_000_[6])
  );
  NOR _184_ (
    .A(_038_),
    .B(_004_),
    .Y(_000_[7])
  );
  NOR _185_ (
    .A(_044_),
    .B(_042_),
    .Y(_001_[0])
  );
  DFF _186_ (
    .C(clk_2f),
    .D(_002_),
    .Q(selector)
  );
  DFF _187_ (
    .C(clk_2f),
    .D(_003_),
    .Q(validflop)
  );
  DFF _188_ (
    .C(clk_2f),
    .D(_000_[0]),
    .Q(l0[0])
  );
  DFF _189_ (
    .C(clk_2f),
    .D(_000_[1]),
    .Q(l0[1])
  );
  DFF _190_ (
    .C(clk_2f),
    .D(_000_[2]),
    .Q(l0[2])
  );
  DFF _191_ (
    .C(clk_2f),
    .D(_000_[3]),
    .Q(l0[3])
  );
  DFF _192_ (
    .C(clk_2f),
    .D(_000_[4]),
    .Q(l0[4])
  );
  DFF _193_ (
    .C(clk_2f),
    .D(_000_[5]),
    .Q(l0[5])
  );
  DFF _194_ (
    .C(clk_2f),
    .D(_000_[6]),
    .Q(l0[6])
  );
  DFF _195_ (
    .C(clk_2f),
    .D(_000_[7]),
    .Q(l0[7])
  );
  DFF _196_ (
    .C(clk_2f),
    .D(_001_[0]),
    .Q(l1[0])
  );
  DFF _197_ (
    .C(clk_2f),
    .D(_001_[1]),
    .Q(l1[1])
  );
  DFF _198_ (
    .C(clk_2f),
    .D(_001_[2]),
    .Q(l1[2])
  );
  DFF _199_ (
    .C(clk_2f),
    .D(_001_[3]),
    .Q(l1[3])
  );
  DFF _200_ (
    .C(clk_2f),
    .D(_001_[4]),
    .Q(l1[4])
  );
  DFF _201_ (
    .C(clk_2f),
    .D(_001_[5]),
    .Q(l1[5])
  );
  DFF _202_ (
    .C(clk_2f),
    .D(_001_[6]),
    .Q(l1[6])
  );
  DFF _203_ (
    .C(clk_2f),
    .D(_001_[7]),
    .Q(l1[7])
  );
endmodule

(* src = "byte_unstripping_synth.v:2" *)
module byte_unstripping_synth(data_unstripped, valid_unstripped, clk_2f, reset_L, data_par_0, data_par_1, valid_par_0, valid_par_1);
  (* src = "byte_unstripping_synth.v:39" *)
  wire _000_;
  (* src = "byte_unstripping_synth.v:39" *)
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  (* src = "byte_unstripping_synth.v:5" *)
  input clk_2f;
  (* src = "byte_unstripping_synth.v:7" *)
  input [7:0] data_par_0;
  (* src = "byte_unstripping_synth.v:8" *)
  input [7:0] data_par_1;
  (* src = "byte_unstripping_synth.v:3" *)
  output [7:0] data_unstripped;
  (* src = "byte_unstripping_synth.v:15" *)
  wire lectura;
  (* src = "byte_unstripping_synth.v:6" *)
  input reset_L;
  (* src = "byte_unstripping_synth.v:14" *)
  wire selector;
  (* src = "byte_unstripping_synth.v:9" *)
  input valid_par_0;
  (* src = "byte_unstripping_synth.v:10" *)
  input valid_par_1;
  (* src = "byte_unstripping_synth.v:4" *)
  output valid_unstripped;
  NAND _050_ (
    .A(reset_L),
    .B(lectura),
    .Y(_002_)
  );
  NOR _051_ (
    .A(_002_),
    .B(selector),
    .Y(_001_)
  );
  NOT _052_ (
    .A(valid_par_1),
    .Y(_003_)
  );
  NOT _053_ (
    .A(selector),
    .Y(_004_)
  );
  NOR _054_ (
    .A(_004_),
    .B(_003_),
    .Y(_005_)
  );
  NOT _055_ (
    .A(valid_par_0),
    .Y(_006_)
  );
  NOR _056_ (
    .A(selector),
    .B(_006_),
    .Y(_007_)
  );
  NOR _057_ (
    .A(_007_),
    .B(_005_),
    .Y(_008_)
  );
  NOR _058_ (
    .A(_008_),
    .B(_002_),
    .Y(valid_unstripped)
  );
  NOT _059_ (
    .A(data_par_1[0]),
    .Y(_009_)
  );
  NOR _060_ (
    .A(_009_),
    .B(_004_),
    .Y(_010_)
  );
  NOT _061_ (
    .A(data_par_0[0]),
    .Y(_011_)
  );
  NOR _062_ (
    .A(_011_),
    .B(selector),
    .Y(_012_)
  );
  NOR _063_ (
    .A(_012_),
    .B(_010_),
    .Y(_013_)
  );
  NOR _064_ (
    .A(_013_),
    .B(_002_),
    .Y(data_unstripped[0])
  );
  NOT _065_ (
    .A(data_par_1[1]),
    .Y(_014_)
  );
  NOR _066_ (
    .A(_014_),
    .B(_004_),
    .Y(_015_)
  );
  NOT _067_ (
    .A(data_par_0[1]),
    .Y(_016_)
  );
  NOR _068_ (
    .A(_016_),
    .B(selector),
    .Y(_017_)
  );
  NOR _069_ (
    .A(_017_),
    .B(_015_),
    .Y(_018_)
  );
  NOR _070_ (
    .A(_018_),
    .B(_002_),
    .Y(data_unstripped[1])
  );
  NOT _071_ (
    .A(data_par_1[2]),
    .Y(_019_)
  );
  NOR _072_ (
    .A(_019_),
    .B(_004_),
    .Y(_020_)
  );
  NOT _073_ (
    .A(data_par_0[2]),
    .Y(_021_)
  );
  NOR _074_ (
    .A(_021_),
    .B(selector),
    .Y(_022_)
  );
  NOR _075_ (
    .A(_022_),
    .B(_020_),
    .Y(_023_)
  );
  NOR _076_ (
    .A(_023_),
    .B(_002_),
    .Y(data_unstripped[2])
  );
  NOT _077_ (
    .A(data_par_1[3]),
    .Y(_024_)
  );
  NOR _078_ (
    .A(_024_),
    .B(_004_),
    .Y(_025_)
  );
  NOT _079_ (
    .A(data_par_0[3]),
    .Y(_026_)
  );
  NOR _080_ (
    .A(_026_),
    .B(selector),
    .Y(_027_)
  );
  NOR _081_ (
    .A(_027_),
    .B(_025_),
    .Y(_028_)
  );
  NOR _082_ (
    .A(_028_),
    .B(_002_),
    .Y(data_unstripped[3])
  );
  NOT _083_ (
    .A(data_par_1[4]),
    .Y(_029_)
  );
  NOR _084_ (
    .A(_029_),
    .B(_004_),
    .Y(_030_)
  );
  NOT _085_ (
    .A(data_par_0[4]),
    .Y(_031_)
  );
  NOR _086_ (
    .A(_031_),
    .B(selector),
    .Y(_032_)
  );
  NOR _087_ (
    .A(_032_),
    .B(_030_),
    .Y(_033_)
  );
  NOR _088_ (
    .A(_033_),
    .B(_002_),
    .Y(data_unstripped[4])
  );
  NOT _089_ (
    .A(data_par_1[5]),
    .Y(_034_)
  );
  NOR _090_ (
    .A(_034_),
    .B(_004_),
    .Y(_035_)
  );
  NOT _091_ (
    .A(data_par_0[5]),
    .Y(_036_)
  );
  NOR _092_ (
    .A(_036_),
    .B(selector),
    .Y(_037_)
  );
  NOR _093_ (
    .A(_037_),
    .B(_035_),
    .Y(_038_)
  );
  NOR _094_ (
    .A(_038_),
    .B(_002_),
    .Y(data_unstripped[5])
  );
  NOT _095_ (
    .A(data_par_1[6]),
    .Y(_039_)
  );
  NOR _096_ (
    .A(_039_),
    .B(_004_),
    .Y(_040_)
  );
  NOT _097_ (
    .A(data_par_0[6]),
    .Y(_041_)
  );
  NOR _098_ (
    .A(_041_),
    .B(selector),
    .Y(_042_)
  );
  NOR _099_ (
    .A(_042_),
    .B(_040_),
    .Y(_043_)
  );
  NOR _100_ (
    .A(_043_),
    .B(_002_),
    .Y(data_unstripped[6])
  );
  NOT _101_ (
    .A(data_par_1[7]),
    .Y(_044_)
  );
  NOR _102_ (
    .A(_044_),
    .B(_004_),
    .Y(_045_)
  );
  NOT _103_ (
    .A(data_par_0[7]),
    .Y(_046_)
  );
  NOR _104_ (
    .A(_046_),
    .B(selector),
    .Y(_047_)
  );
  NOR _105_ (
    .A(_047_),
    .B(_045_),
    .Y(_048_)
  );
  NOR _106_ (
    .A(_048_),
    .B(_002_),
    .Y(data_unstripped[7])
  );
  NOT _107_ (
    .A(reset_L),
    .Y(_049_)
  );
  NOR _108_ (
    .A(_006_),
    .B(_049_),
    .Y(_000_)
  );
  DFF _109_ (
    .C(clk_2f),
    .D(_001_),
    .Q(selector)
  );
  DFF _110_ (
    .C(clk_2f),
    .D(_000_),
    .Q(lectura)
  );
endmodule

(* src = "demux_synth_synth.v:9" *)
module demux_synth_synth(data_demux_synth_synth_0, data_demux_synth_synth_1, valid_demux_synth_synth_0, valid_demux_synth_synth_1, valid_unstripped, clk_2f, reset_L, data_unstripped);
  (* src = "demux_synth_synth.v:58" *)
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  (* src = "demux_synth_synth.v:15" *)
  input clk_2f;
  (* src = "demux_synth_synth.v:10" *)
  output [7:0] data_demux_synth_synth_0;
  (* src = "demux_synth_synth.v:11" *)
  output [7:0] data_demux_synth_synth_1;
  (* src = "demux_synth_synth.v:20" *)
  wire [7:0] data_reg0;
  (* src = "demux_synth_synth.v:20" *)
  wire [7:0] data_reg1;
  (* src = "demux_synth_synth.v:17" *)
  input [7:0] data_unstripped;
  (* src = "demux_synth_synth.v:16" *)
  input reset_L;
  (* src = "demux_synth_synth.v:19" *)
  wire selector;
  (* src = "demux_synth_synth.v:12" *)
  output valid_demux_synth_synth_0;
  (* src = "demux_synth_synth.v:13" *)
  output valid_demux_synth_synth_1;
  (* src = "demux_synth_synth.v:14" *)
  input valid_unstripped;
  NOT _059_ (
    .A(selector),
    .Y(_017_)
  );
  NOR _060_ (
    .A(valid_unstripped),
    .B(_017_),
    .Y(_018_)
  );
  NAND _061_ (
    .A(valid_unstripped),
    .B(_017_),
    .Y(_019_)
  );
  NAND _062_ (
    .A(_019_),
    .B(reset_L),
    .Y(_020_)
  );
  NOR _063_ (
    .A(_020_),
    .B(_018_),
    .Y(_000_)
  );
  NOT _064_ (
    .A(reset_L),
    .Y(_021_)
  );
  NOT _065_ (
    .A(valid_unstripped),
    .Y(_022_)
  );
  NOR _066_ (
    .A(_022_),
    .B(_017_),
    .Y(_023_)
  );
  NOT _067_ (
    .A(_023_),
    .Y(_024_)
  );
  NOR _068_ (
    .A(_024_),
    .B(_021_),
    .Y(valid_demux_synth_synth_1)
  );
  NOR _069_ (
    .A(_019_),
    .B(_021_),
    .Y(valid_demux_synth_synth_0)
  );
  NOR _070_ (
    .A(_023_),
    .B(data_reg1[0]),
    .Y(_025_)
  );
  NOT _071_ (
    .A(data_unstripped[0]),
    .Y(_026_)
  );
  NAND _072_ (
    .A(_023_),
    .B(_026_),
    .Y(_027_)
  );
  NAND _073_ (
    .A(_027_),
    .B(reset_L),
    .Y(_028_)
  );
  NOR _074_ (
    .A(_028_),
    .B(_025_),
    .Y(data_demux_synth_synth_1[0])
  );
  NOR _075_ (
    .A(_023_),
    .B(data_reg1[1]),
    .Y(_029_)
  );
  NOT _076_ (
    .A(data_unstripped[1]),
    .Y(_030_)
  );
  NAND _077_ (
    .A(_023_),
    .B(_030_),
    .Y(_031_)
  );
  NAND _078_ (
    .A(_031_),
    .B(reset_L),
    .Y(_032_)
  );
  NOR _079_ (
    .A(_032_),
    .B(_029_),
    .Y(data_demux_synth_synth_1[1])
  );
  NOR _080_ (
    .A(_023_),
    .B(data_reg1[2]),
    .Y(_033_)
  );
  NOT _081_ (
    .A(data_unstripped[2]),
    .Y(_034_)
  );
  NAND _082_ (
    .A(_023_),
    .B(_034_),
    .Y(_035_)
  );
  NAND _083_ (
    .A(_035_),
    .B(reset_L),
    .Y(_036_)
  );
  NOR _084_ (
    .A(_036_),
    .B(_033_),
    .Y(data_demux_synth_synth_1[2])
  );
  NOR _085_ (
    .A(_023_),
    .B(data_reg1[3]),
    .Y(_037_)
  );
  NOT _086_ (
    .A(data_unstripped[3]),
    .Y(_038_)
  );
  NAND _087_ (
    .A(_023_),
    .B(_038_),
    .Y(_039_)
  );
  NAND _088_ (
    .A(_039_),
    .B(reset_L),
    .Y(_040_)
  );
  NOR _089_ (
    .A(_040_),
    .B(_037_),
    .Y(data_demux_synth_synth_1[3])
  );
  NOR _090_ (
    .A(_023_),
    .B(data_reg1[4]),
    .Y(_041_)
  );
  NOT _091_ (
    .A(data_unstripped[4]),
    .Y(_042_)
  );
  NAND _092_ (
    .A(_023_),
    .B(_042_),
    .Y(_043_)
  );
  NAND _093_ (
    .A(_043_),
    .B(reset_L),
    .Y(_044_)
  );
  NOR _094_ (
    .A(_044_),
    .B(_041_),
    .Y(data_demux_synth_synth_1[4])
  );
  NOR _095_ (
    .A(_023_),
    .B(data_reg1[5]),
    .Y(_045_)
  );
  NOT _096_ (
    .A(data_unstripped[5]),
    .Y(_046_)
  );
  NAND _097_ (
    .A(_023_),
    .B(_046_),
    .Y(_047_)
  );
  NAND _098_ (
    .A(_047_),
    .B(reset_L),
    .Y(_048_)
  );
  NOR _099_ (
    .A(_048_),
    .B(_045_),
    .Y(data_demux_synth_synth_1[5])
  );
  NOR _100_ (
    .A(_023_),
    .B(data_reg1[6]),
    .Y(_049_)
  );
  NOT _101_ (
    .A(data_unstripped[6]),
    .Y(_050_)
  );
  NAND _102_ (
    .A(_023_),
    .B(_050_),
    .Y(_051_)
  );
  NAND _103_ (
    .A(_051_),
    .B(reset_L),
    .Y(_052_)
  );
  NOR _104_ (
    .A(_052_),
    .B(_049_),
    .Y(data_demux_synth_synth_1[6])
  );
  NOR _105_ (
    .A(_023_),
    .B(data_reg1[7]),
    .Y(_053_)
  );
  NOT _106_ (
    .A(data_unstripped[7]),
    .Y(_054_)
  );
  NAND _107_ (
    .A(_023_),
    .B(_054_),
    .Y(_055_)
  );
  NAND _108_ (
    .A(_055_),
    .B(reset_L),
    .Y(_056_)
  );
  NOR _109_ (
    .A(_056_),
    .B(_053_),
    .Y(data_demux_synth_synth_1[7])
  );
  NOR _110_ (
    .A(_022_),
    .B(selector),
    .Y(_057_)
  );
  NOR _111_ (
    .A(_057_),
    .B(_021_),
    .Y(_058_)
  );
  NAND _112_ (
    .A(_058_),
    .B(data_reg0[0]),
    .Y(_001_)
  );
  NAND _113_ (
    .A(valid_demux_synth_synth_0),
    .B(data_unstripped[0]),
    .Y(_002_)
  );
  NAND _114_ (
    .A(_002_),
    .B(_001_),
    .Y(data_demux_synth_synth_0[0])
  );
  NAND _115_ (
    .A(_058_),
    .B(data_reg0[1]),
    .Y(_003_)
  );
  NAND _116_ (
    .A(valid_demux_synth_synth_0),
    .B(data_unstripped[1]),
    .Y(_004_)
  );
  NAND _117_ (
    .A(_004_),
    .B(_003_),
    .Y(data_demux_synth_synth_0[1])
  );
  NAND _118_ (
    .A(_058_),
    .B(data_reg0[2]),
    .Y(_005_)
  );
  NAND _119_ (
    .A(valid_demux_synth_synth_0),
    .B(data_unstripped[2]),
    .Y(_006_)
  );
  NAND _120_ (
    .A(_006_),
    .B(_005_),
    .Y(data_demux_synth_synth_0[2])
  );
  NAND _121_ (
    .A(_058_),
    .B(data_reg0[3]),
    .Y(_007_)
  );
  NAND _122_ (
    .A(valid_demux_synth_synth_0),
    .B(data_unstripped[3]),
    .Y(_008_)
  );
  NAND _123_ (
    .A(_008_),
    .B(_007_),
    .Y(data_demux_synth_synth_0[3])
  );
  NAND _124_ (
    .A(_058_),
    .B(data_reg0[4]),
    .Y(_009_)
  );
  NAND _125_ (
    .A(valid_demux_synth_synth_0),
    .B(data_unstripped[4]),
    .Y(_010_)
  );
  NAND _126_ (
    .A(_010_),
    .B(_009_),
    .Y(data_demux_synth_synth_0[4])
  );
  NAND _127_ (
    .A(_058_),
    .B(data_reg0[5]),
    .Y(_011_)
  );
  NAND _128_ (
    .A(valid_demux_synth_synth_0),
    .B(data_unstripped[5]),
    .Y(_012_)
  );
  NAND _129_ (
    .A(_012_),
    .B(_011_),
    .Y(data_demux_synth_synth_0[5])
  );
  NAND _130_ (
    .A(_058_),
    .B(data_reg0[6]),
    .Y(_013_)
  );
  NAND _131_ (
    .A(valid_demux_synth_synth_0),
    .B(data_unstripped[6]),
    .Y(_014_)
  );
  NAND _132_ (
    .A(_014_),
    .B(_013_),
    .Y(data_demux_synth_synth_0[6])
  );
  NAND _133_ (
    .A(_058_),
    .B(data_reg0[7]),
    .Y(_015_)
  );
  NAND _134_ (
    .A(valid_demux_synth_synth_0),
    .B(data_unstripped[7]),
    .Y(_016_)
  );
  NAND _135_ (
    .A(_016_),
    .B(_015_),
    .Y(data_demux_synth_synth_0[7])
  );
  DFF _136_ (
    .C(clk_2f),
    .D(_000_),
    .Q(selector)
  );
  DFF _137_ (
    .C(clk_2f),
    .D(data_demux_synth_synth_0[0]),
    .Q(data_reg0[0])
  );
  DFF _138_ (
    .C(clk_2f),
    .D(data_demux_synth_synth_0[1]),
    .Q(data_reg0[1])
  );
  DFF _139_ (
    .C(clk_2f),
    .D(data_demux_synth_synth_0[2]),
    .Q(data_reg0[2])
  );
  DFF _140_ (
    .C(clk_2f),
    .D(data_demux_synth_synth_0[3]),
    .Q(data_reg0[3])
  );
  DFF _141_ (
    .C(clk_2f),
    .D(data_demux_synth_synth_0[4]),
    .Q(data_reg0[4])
  );
  DFF _142_ (
    .C(clk_2f),
    .D(data_demux_synth_synth_0[5]),
    .Q(data_reg0[5])
  );
  DFF _143_ (
    .C(clk_2f),
    .D(data_demux_synth_synth_0[6]),
    .Q(data_reg0[6])
  );
  DFF _144_ (
    .C(clk_2f),
    .D(data_demux_synth_synth_0[7]),
    .Q(data_reg0[7])
  );
  DFF _145_ (
    .C(clk_2f),
    .D(data_demux_synth_synth_1[0]),
    .Q(data_reg1[0])
  );
  DFF _146_ (
    .C(clk_2f),
    .D(data_demux_synth_synth_1[1]),
    .Q(data_reg1[1])
  );
  DFF _147_ (
    .C(clk_2f),
    .D(data_demux_synth_synth_1[2]),
    .Q(data_reg1[2])
  );
  DFF _148_ (
    .C(clk_2f),
    .D(data_demux_synth_synth_1[3]),
    .Q(data_reg1[3])
  );
  DFF _149_ (
    .C(clk_2f),
    .D(data_demux_synth_synth_1[4]),
    .Q(data_reg1[4])
  );
  DFF _150_ (
    .C(clk_2f),
    .D(data_demux_synth_synth_1[5]),
    .Q(data_reg1[5])
  );
  DFF _151_ (
    .C(clk_2f),
    .D(data_demux_synth_synth_1[6]),
    .Q(data_reg1[6])
  );
  DFF _152_ (
    .C(clk_2f),
    .D(data_demux_synth_synth_1[7]),
    .Q(data_reg1[7])
  );
endmodule

(* src = "gen_clk_synth.v:1" *)
module gen_clk_synth(clk_8f, enable, clk_2f, clk_f);
  (* src = "gen_clk_synth.v:12" *)
  wire _00_;
  (* src = "gen_clk_synth.v:12" *)
  wire _01_;
  (* src = "gen_clk_synth.v:12" *)
  wire [1:0] _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  (* src = "gen_clk_synth.v:7" *)
  output clk_2f;
  (* src = "gen_clk_synth.v:6" *)
  input clk_8f;
  (* src = "gen_clk_synth.v:7" *)
  output clk_f;
  (* src = "gen_clk_synth.v:9" *)
  wire [1:0] counter;
  (* src = "gen_clk_synth.v:6" *)
  input enable;
  NOT _17_ (
    .A(enable),
    .Y(_03_)
  );
  NOT _18_ (
    .A(counter[0]),
    .Y(_04_)
  );
  NOT _19_ (
    .A(counter[1]),
    .Y(_05_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_04_),
    .Y(_06_)
  );
  NOR _21_ (
    .A(_06_),
    .B(_03_),
    .Y(_02_[0])
  );
  NOT _22_ (
    .A(clk_f),
    .Y(_07_)
  );
  NOR _23_ (
    .A(counter[1]),
    .B(counter[0]),
    .Y(_08_)
  );
  NOR _24_ (
    .A(_08_),
    .B(clk_2f),
    .Y(_09_)
  );
  NOR _25_ (
    .A(_09_),
    .B(_07_),
    .Y(_10_)
  );
  NOT _26_ (
    .A(clk_2f),
    .Y(_11_)
  );
  NAND _27_ (
    .A(_06_),
    .B(_11_),
    .Y(_12_)
  );
  NOR _28_ (
    .A(_12_),
    .B(clk_f),
    .Y(_13_)
  );
  NOR _29_ (
    .A(_13_),
    .B(_10_),
    .Y(_14_)
  );
  NOR _30_ (
    .A(_14_),
    .B(_03_),
    .Y(_01_)
  );
  NOR _31_ (
    .A(_06_),
    .B(_11_),
    .Y(_15_)
  );
  NOR _32_ (
    .A(_15_),
    .B(_09_),
    .Y(_16_)
  );
  NOR _33_ (
    .A(_16_),
    .B(_03_),
    .Y(_00_)
  );
  DFF _34_ (
    .C(clk_8f),
    .D(_00_),
    .Q(clk_2f)
  );
  DFF _35_ (
    .C(clk_8f),
    .D(_01_),
    .Q(clk_f)
  );
  DFF _36_ (
    .C(clk_8f),
    .D(_02_[0]),
    .Q(counter[0])
  );
  DFF _37_ (
    .C(clk_8f),
    .D(1'b0),
    .Q(counter[1])
  );
endmodule

(* src = "mux_synth.v:9" *)
module mux_synth(data_mux_synth, valid_mux_synth, clk_2f, reset_L, valid_reg_0, data_reg_0, valid_reg_1, data_reg_1);
  (* src = "mux_synth.v:67" *)
  wire _00_;
  (* src = "mux_synth.v:67" *)
  wire [7:0] _01_;
  (* src = "mux_synth.v:67" *)
  wire _02_;
  (* src = "mux_synth.v:67" *)
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  (* src = "mux_synth.v:19" *)
  wire channel;
  (* src = "mux_synth.v:12" *)
  input clk_2f;
  (* src = "mux_synth.v:10" *)
  output [7:0] data_mux_synth;
  (* src = "mux_synth.v:15" *)
  input [7:0] data_reg_0;
  (* src = "mux_synth.v:17" *)
  input [7:0] data_reg_1;
  (* src = "mux_synth.v:19" *)
  wire ignore;
  (* src = "mux_synth.v:13" *)
  input reset_L;
  (* src = "mux_synth.v:19" *)
  wire selector;
  (* src = "mux_synth.v:11" *)
  output valid_mux_synth;
  (* src = "mux_synth.v:14" *)
  input valid_reg_0;
  (* src = "mux_synth.v:16" *)
  input valid_reg_1;
  NOT _37_ (
    .A(selector),
    .Y(_04_)
  );
  NOR _38_ (
    .A(_04_),
    .B(valid_mux_synth),
    .Y(_05_)
  );
  NAND _39_ (
    .A(channel),
    .B(valid_mux_synth),
    .Y(_06_)
  );
  NAND _40_ (
    .A(_06_),
    .B(valid_reg_0),
    .Y(_07_)
  );
  NOR _41_ (
    .A(_07_),
    .B(_05_),
    .Y(_08_)
  );
  NAND _42_ (
    .A(reset_L),
    .B(valid_reg_1),
    .Y(_09_)
  );
  NOR _43_ (
    .A(_09_),
    .B(_08_),
    .Y(_00_)
  );
  NAND _44_ (
    .A(valid_reg_1),
    .B(valid_reg_0),
    .Y(_10_)
  );
  NOR _45_ (
    .A(_10_),
    .B(valid_mux_synth),
    .Y(_11_)
  );
  NOR _46_ (
    .A(_11_),
    .B(selector),
    .Y(_12_)
  );
  NAND _47_ (
    .A(_11_),
    .B(selector),
    .Y(_13_)
  );
  NAND _48_ (
    .A(_13_),
    .B(reset_L),
    .Y(_14_)
  );
  NOR _49_ (
    .A(_14_),
    .B(_12_),
    .Y(_03_)
  );
  NOT _50_ (
    .A(reset_L),
    .Y(_15_)
  );
  NOR _51_ (
    .A(valid_reg_1),
    .B(valid_reg_0),
    .Y(_16_)
  );
  NOR _52_ (
    .A(_16_),
    .B(_15_),
    .Y(_02_)
  );
  NOT _53_ (
    .A(valid_reg_0),
    .Y(_17_)
  );
  NOR _54_ (
    .A(valid_reg_1),
    .B(_17_),
    .Y(_18_)
  );
  NOR _55_ (
    .A(_18_),
    .B(_08_),
    .Y(_19_)
  );
  NOR _56_ (
    .A(_19_),
    .B(_15_),
    .Y(_20_)
  );
  NAND _57_ (
    .A(_20_),
    .B(data_reg_0[0]),
    .Y(_21_)
  );
  NAND _58_ (
    .A(_00_),
    .B(data_reg_1[0]),
    .Y(_22_)
  );
  NAND _59_ (
    .A(_22_),
    .B(_21_),
    .Y(_01_[0])
  );
  NAND _60_ (
    .A(_00_),
    .B(data_reg_1[1]),
    .Y(_23_)
  );
  NAND _61_ (
    .A(_20_),
    .B(data_reg_0[1]),
    .Y(_24_)
  );
  NAND _62_ (
    .A(_24_),
    .B(_23_),
    .Y(_01_[1])
  );
  NAND _63_ (
    .A(_00_),
    .B(data_reg_1[2]),
    .Y(_25_)
  );
  NAND _64_ (
    .A(_20_),
    .B(data_reg_0[2]),
    .Y(_26_)
  );
  NAND _65_ (
    .A(_26_),
    .B(_25_),
    .Y(_01_[2])
  );
  NAND _66_ (
    .A(_00_),
    .B(data_reg_1[3]),
    .Y(_27_)
  );
  NAND _67_ (
    .A(_20_),
    .B(data_reg_0[3]),
    .Y(_28_)
  );
  NAND _68_ (
    .A(_28_),
    .B(_27_),
    .Y(_01_[3])
  );
  NAND _69_ (
    .A(_00_),
    .B(data_reg_1[4]),
    .Y(_29_)
  );
  NAND _70_ (
    .A(_20_),
    .B(data_reg_0[4]),
    .Y(_30_)
  );
  NAND _71_ (
    .A(_30_),
    .B(_29_),
    .Y(_01_[4])
  );
  NAND _72_ (
    .A(_00_),
    .B(data_reg_1[5]),
    .Y(_31_)
  );
  NAND _73_ (
    .A(_20_),
    .B(data_reg_0[5]),
    .Y(_32_)
  );
  NAND _74_ (
    .A(_32_),
    .B(_31_),
    .Y(_01_[5])
  );
  NAND _75_ (
    .A(_00_),
    .B(data_reg_1[6]),
    .Y(_33_)
  );
  NAND _76_ (
    .A(_20_),
    .B(data_reg_0[6]),
    .Y(_34_)
  );
  NAND _77_ (
    .A(_34_),
    .B(_33_),
    .Y(_01_[6])
  );
  NAND _78_ (
    .A(_00_),
    .B(data_reg_1[7]),
    .Y(_35_)
  );
  NAND _79_ (
    .A(_20_),
    .B(data_reg_0[7]),
    .Y(_36_)
  );
  NAND _80_ (
    .A(_36_),
    .B(_35_),
    .Y(_01_[7])
  );
  DFF _81_ (
    .C(clk_2f),
    .D(_01_[0]),
    .Q(data_mux_synth[0])
  );
  DFF _82_ (
    .C(clk_2f),
    .D(_01_[1]),
    .Q(data_mux_synth[1])
  );
  DFF _83_ (
    .C(clk_2f),
    .D(_01_[2]),
    .Q(data_mux_synth[2])
  );
  DFF _84_ (
    .C(clk_2f),
    .D(_01_[3]),
    .Q(data_mux_synth[3])
  );
  DFF _85_ (
    .C(clk_2f),
    .D(_01_[4]),
    .Q(data_mux_synth[4])
  );
  DFF _86_ (
    .C(clk_2f),
    .D(_01_[5]),
    .Q(data_mux_synth[5])
  );
  DFF _87_ (
    .C(clk_2f),
    .D(_01_[6]),
    .Q(data_mux_synth[6])
  );
  DFF _88_ (
    .C(clk_2f),
    .D(_01_[7]),
    .Q(data_mux_synth[7])
  );
  DFF _89_ (
    .C(clk_2f),
    .D(_02_),
    .Q(valid_mux_synth)
  );
  DFF _90_ (
    .C(clk_2f),
    .D(_03_),
    .Q(selector)
  );
  DFF _91_ (
    .C(clk_2f),
    .D(_00_),
    .Q(channel)
  );
  assign ignore = valid_mux_synth;
endmodule

(* src = "partoserial_synth.v:1" *)
module partoserial_synth(data_stripe, valid_stripe, reset_L, clk_8f, out);
  (* src = "partoserial_synth.v:27" *)
  wire [3:0] _000_;
  (* src = "partoserial_synth.v:27" *)
  wire _001_;
  (* src = "partoserial_synth.v:27" *)
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  (* src = "partoserial_synth.v:5" *)
  input clk_8f;
  (* src = "partoserial_synth.v:9" *)
  wire [3:0] contador;
  (* src = "partoserial_synth.v:2" *)
  input [7:0] data_stripe;
  (* src = "partoserial_synth.v:11" *)
  wire flag;
  (* src = "partoserial_synth.v:6" *)
  output out;
  (* src = "partoserial_synth.v:4" *)
  input reset_L;
  (* src = "partoserial_synth.v:3" *)
  input valid_stripe;
  NOT _064_ (
    .A(reset_L),
    .Y(_003_)
  );
  NOT _065_ (
    .A(contador[3]),
    .Y(_004_)
  );
  NAND _066_ (
    .A(contador[2]),
    .B(_004_),
    .Y(_005_)
  );
  NAND _067_ (
    .A(contador[1]),
    .B(contador[0]),
    .Y(_006_)
  );
  NOR _068_ (
    .A(_006_),
    .B(_005_),
    .Y(_007_)
  );
  NOR _069_ (
    .A(_007_),
    .B(flag),
    .Y(_008_)
  );
  NOR _070_ (
    .A(_008_),
    .B(_003_),
    .Y(_001_)
  );
  NOR _071_ (
    .A(valid_stripe),
    .B(flag),
    .Y(_009_)
  );
  NOT _072_ (
    .A(_009_),
    .Y(_010_)
  );
  NOR _073_ (
    .A(_010_),
    .B(contador[0]),
    .Y(_011_)
  );
  NOR _074_ (
    .A(_007_),
    .B(_003_),
    .Y(_012_)
  );
  NOT _075_ (
    .A(contador[0]),
    .Y(_013_)
  );
  NOR _076_ (
    .A(_009_),
    .B(_013_),
    .Y(_014_)
  );
  NOT _077_ (
    .A(_014_),
    .Y(_015_)
  );
  NAND _078_ (
    .A(_015_),
    .B(_012_),
    .Y(_016_)
  );
  NOR _079_ (
    .A(_016_),
    .B(_011_),
    .Y(_000_[0])
  );
  NAND _080_ (
    .A(_014_),
    .B(contador[1]),
    .Y(_017_)
  );
  NOT _081_ (
    .A(_017_),
    .Y(_018_)
  );
  NOT _082_ (
    .A(contador[1]),
    .Y(_019_)
  );
  NAND _083_ (
    .A(_015_),
    .B(_019_),
    .Y(_020_)
  );
  NAND _084_ (
    .A(_020_),
    .B(_012_),
    .Y(_021_)
  );
  NOR _085_ (
    .A(_021_),
    .B(_018_),
    .Y(_000_[1])
  );
  NOT _086_ (
    .A(contador[2]),
    .Y(_022_)
  );
  NOR _087_ (
    .A(_017_),
    .B(_022_),
    .Y(_023_)
  );
  NAND _088_ (
    .A(_017_),
    .B(_022_),
    .Y(_024_)
  );
  NAND _089_ (
    .A(_024_),
    .B(_012_),
    .Y(_025_)
  );
  NOR _090_ (
    .A(_025_),
    .B(_023_),
    .Y(_000_[2])
  );
  NAND _091_ (
    .A(reset_L),
    .B(contador[3]),
    .Y(_026_)
  );
  NOR _092_ (
    .A(_026_),
    .B(_023_),
    .Y(_000_[3])
  );
  NAND _093_ (
    .A(_010_),
    .B(_013_),
    .Y(_027_)
  );
  NAND _094_ (
    .A(valid_stripe),
    .B(reset_L),
    .Y(_028_)
  );
  NOR _095_ (
    .A(data_stripe[3]),
    .B(_022_),
    .Y(_029_)
  );
  NOR _096_ (
    .A(data_stripe[7]),
    .B(contador[2]),
    .Y(_030_)
  );
  NOR _097_ (
    .A(_030_),
    .B(_029_),
    .Y(_031_)
  );
  NOR _098_ (
    .A(_031_),
    .B(_028_),
    .Y(_032_)
  );
  NOR _099_ (
    .A(_032_),
    .B(contador[3]),
    .Y(_033_)
  );
  NOR _100_ (
    .A(_033_),
    .B(contador[1]),
    .Y(_034_)
  );
  NOR _101_ (
    .A(contador[2]),
    .B(contador[3]),
    .Y(_035_)
  );
  NOT _102_ (
    .A(_035_),
    .Y(_036_)
  );
  NOR _103_ (
    .A(_028_),
    .B(data_stripe[5]),
    .Y(_037_)
  );
  NOR _104_ (
    .A(_037_),
    .B(_036_),
    .Y(_038_)
  );
  NOR _105_ (
    .A(_028_),
    .B(_005_),
    .Y(_039_)
  );
  NAND _106_ (
    .A(_039_),
    .B(data_stripe[1]),
    .Y(_040_)
  );
  NAND _107_ (
    .A(_040_),
    .B(contador[1]),
    .Y(_041_)
  );
  NOR _108_ (
    .A(_041_),
    .B(_038_),
    .Y(_042_)
  );
  NOR _109_ (
    .A(_042_),
    .B(_034_),
    .Y(_043_)
  );
  NOR _110_ (
    .A(_043_),
    .B(_027_),
    .Y(_044_)
  );
  NOT _111_ (
    .A(data_stripe[4]),
    .Y(_045_)
  );
  NOT _112_ (
    .A(valid_stripe),
    .Y(_046_)
  );
  NOR _113_ (
    .A(_046_),
    .B(_003_),
    .Y(_047_)
  );
  NAND _114_ (
    .A(_047_),
    .B(_045_),
    .Y(_048_)
  );
  NAND _115_ (
    .A(_048_),
    .B(_035_),
    .Y(_049_)
  );
  NAND _116_ (
    .A(_039_),
    .B(data_stripe[0]),
    .Y(_050_)
  );
  NAND _117_ (
    .A(_050_),
    .B(_049_),
    .Y(_051_)
  );
  NAND _118_ (
    .A(_051_),
    .B(contador[1]),
    .Y(_052_)
  );
  NOR _119_ (
    .A(_028_),
    .B(data_stripe[2]),
    .Y(_053_)
  );
  NOR _120_ (
    .A(_053_),
    .B(_005_),
    .Y(_054_)
  );
  NAND _121_ (
    .A(_035_),
    .B(data_stripe[6]),
    .Y(_055_)
  );
  NOR _122_ (
    .A(_055_),
    .B(_028_),
    .Y(_056_)
  );
  NOR _123_ (
    .A(_056_),
    .B(_054_),
    .Y(_057_)
  );
  NOR _124_ (
    .A(_057_),
    .B(contador[1]),
    .Y(_058_)
  );
  NOR _125_ (
    .A(_058_),
    .B(_015_),
    .Y(_059_)
  );
  NAND _126_ (
    .A(_059_),
    .B(_052_),
    .Y(_060_)
  );
  NOR _127_ (
    .A(_010_),
    .B(out),
    .Y(_061_)
  );
  NOR _128_ (
    .A(_061_),
    .B(_003_),
    .Y(_062_)
  );
  NAND _129_ (
    .A(_062_),
    .B(_060_),
    .Y(_063_)
  );
  NOR _130_ (
    .A(_063_),
    .B(_044_),
    .Y(_002_)
  );
  DFF _131_ (
    .C(clk_8f),
    .D(_002_),
    .Q(out)
  );
  DFF _132_ (
    .C(clk_8f),
    .D(_000_[0]),
    .Q(contador[0])
  );
  DFF _133_ (
    .C(clk_8f),
    .D(_000_[1]),
    .Q(contador[1])
  );
  DFF _134_ (
    .C(clk_8f),
    .D(_000_[2]),
    .Q(contador[2])
  );
  DFF _135_ (
    .C(clk_8f),
    .D(_000_[3]),
    .Q(contador[3])
  );
  DFF _136_ (
    .C(clk_8f),
    .D(_001_),
    .Q(flag)
  );
endmodule

(* top =  1  *)
(* src = "phy_synth.v:6" *)
module phy_synth(clk_8f, reset_L, enable, data_in_0, data_in_1, valid_data_in_0, valid_data_in_1, valid_data_out_0, valid_data_out_1, data_out_0, data_out_1);
  (* src = "phy_synth.v:31" *)
  wire clk_2f;
  (* src = "phy_synth.v:7" *)
  input clk_8f;
  (* src = "phy_synth.v:32" *)
  wire clk_f;
  (* src = "phy_synth.v:10" *)
  input [7:0] data_in_0;
  (* src = "phy_synth.v:11" *)
  input [7:0] data_in_1;
  (* src = "phy_synth.v:16" *)
  output [7:0] data_out_0;
  (* src = "phy_synth.v:17" *)
  output [7:0] data_out_1;
  (* src = "phy_synth.v:9" *)
  input enable;
  (* src = "phy_synth.v:8" *)
  input reset_L;
  (* src = "phy_synth.v:23" *)
  wire transfer_0;
  (* src = "phy_synth.v:24" *)
  wire transfer_1;
  (* src = "phy_synth.v:12" *)
  input valid_data_in_0;
  (* src = "phy_synth.v:13" *)
  input valid_data_in_1;
  (* src = "phy_synth.v:14" *)
  output valid_data_out_0;
  (* src = "phy_synth.v:15" *)
  output valid_data_out_1;
  (* src = "phy_synth.v:29" *)
  gen_clk_synth clocks (
    .clk_2f(clk_2f),
    .clk_8f(clk_8f),
    .clk_f(clk_f),
    .enable(enable)
  );
  (* src = "phy_synth.v:51" *)
  phy_synth_rx rx_mod (
    .clk_2f(clk_2f),
    .clk_8f(clk_8f),
    .clk_f(clk_f),
    .data_out_0(data_out_0),
    .data_out_1(data_out_1),
    .reset_L(reset_L),
    .transfer_0(transfer_0),
    .transfer_1(transfer_1),
    .valid_data_out_0(valid_data_out_0),
    .valid_data_out_1(valid_data_out_1)
  );
  (* src = "phy_synth.v:37" *)
  phy_synth_tx tx_mod (
    .clk_2f(clk_2f),
    .clk_8f(clk_8f),
    .clk_f(clk_f),
    .data_in_0(data_in_0),
    .data_in_1(data_in_1),
    .reset_L(reset_L),
    .transfer_0(transfer_0),
    .transfer_1(transfer_1),
    .valid_data_in_0(valid_data_in_0),
    .valid_data_in_1(valid_data_in_1)
  );
endmodule

(* src = "phy_synth_rx.v:5" *)
module phy_synth_rx(clk_8f, clk_2f, clk_f, reset_L, transfer_0, transfer_1, data_out_0, data_out_1, valid_data_out_0, valid_data_out_1);
  (* src = "phy_synth_rx.v:30" *)
  wire [7:0] _00_;
  (* src = "phy_synth_rx.v:30" *)
  wire [7:0] _01_;
  (* src = "phy_synth_rx.v:30" *)
  wire _02_;
  (* src = "phy_synth_rx.v:30" *)
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  (* src = "phy_synth_rx.v:7" *)
  input clk_2f;
  (* src = "phy_synth_rx.v:6" *)
  input clk_8f;
  (* src = "phy_synth_rx.v:8" *)
  input clk_f;
  (* src = "phy_synth_rx.v:19" *)
  wire [7:0] data_demux_synth_synth_0;
  (* src = "phy_synth_rx.v:20" *)
  wire [7:0] data_demux_synth_synth_1;
  (* src = "phy_synth_rx.v:12" *)
  output [7:0] data_out_0;
  (* src = "phy_synth_rx.v:13" *)
  output [7:0] data_out_1;
  (* src = "phy_synth_rx.v:24" *)
  wire [7:0] data_par_0;
  (* src = "phy_synth_rx.v:26" *)
  wire [7:0] data_par_1;
  (* src = "phy_synth_rx.v:21" *)
  wire [7:0] data_unstripped;
  (* src = "phy_synth_rx.v:9" *)
  input reset_L;
  (* src = "phy_synth_rx.v:10" *)
  input transfer_0;
  (* src = "phy_synth_rx.v:11" *)
  input transfer_1;
  (* src = "phy_synth_rx.v:14" *)
  output valid_data_out_0;
  (* src = "phy_synth_rx.v:15" *)
  output valid_data_out_1;
  (* src = "phy_synth_rx.v:22" *)
  wire valid_demux_synth_synth_0;
  (* src = "phy_synth_rx.v:23" *)
  wire valid_demux_synth_synth_1;
  (* src = "phy_synth_rx.v:25" *)
  wire valid_par_0;
  (* src = "phy_synth_rx.v:27" *)
  wire valid_par_1;
  (* src = "phy_synth_rx.v:28" *)
  wire valid_unstripped;
  NOT _23_ (
    .A(valid_demux_synth_synth_0),
    .Y(_04_)
  );
  NOT _24_ (
    .A(reset_L),
    .Y(_05_)
  );
  NOR _25_ (
    .A(_05_),
    .B(_04_),
    .Y(_02_)
  );
  NOT _26_ (
    .A(data_demux_synth_synth_1[0]),
    .Y(_06_)
  );
  NOR _27_ (
    .A(_06_),
    .B(_05_),
    .Y(_01_[0])
  );
  NOT _28_ (
    .A(data_demux_synth_synth_1[1]),
    .Y(_07_)
  );
  NOR _29_ (
    .A(_07_),
    .B(_05_),
    .Y(_01_[1])
  );
  NOT _30_ (
    .A(data_demux_synth_synth_1[2]),
    .Y(_08_)
  );
  NOR _31_ (
    .A(_08_),
    .B(_05_),
    .Y(_01_[2])
  );
  NOT _32_ (
    .A(data_demux_synth_synth_1[3]),
    .Y(_09_)
  );
  NOR _33_ (
    .A(_09_),
    .B(_05_),
    .Y(_01_[3])
  );
  NOT _34_ (
    .A(data_demux_synth_synth_1[4]),
    .Y(_10_)
  );
  NOR _35_ (
    .A(_10_),
    .B(_05_),
    .Y(_01_[4])
  );
  NOT _36_ (
    .A(data_demux_synth_synth_1[5]),
    .Y(_11_)
  );
  NOR _37_ (
    .A(_11_),
    .B(_05_),
    .Y(_01_[5])
  );
  NOT _38_ (
    .A(data_demux_synth_synth_1[6]),
    .Y(_12_)
  );
  NOR _39_ (
    .A(_12_),
    .B(_05_),
    .Y(_01_[6])
  );
  NOT _40_ (
    .A(data_demux_synth_synth_1[7]),
    .Y(_13_)
  );
  NOR _41_ (
    .A(_13_),
    .B(_05_),
    .Y(_01_[7])
  );
  NOT _42_ (
    .A(data_demux_synth_synth_0[0]),
    .Y(_14_)
  );
  NOR _43_ (
    .A(_14_),
    .B(_05_),
    .Y(_00_[0])
  );
  NOT _44_ (
    .A(data_demux_synth_synth_0[1]),
    .Y(_15_)
  );
  NOR _45_ (
    .A(_15_),
    .B(_05_),
    .Y(_00_[1])
  );
  NOT _46_ (
    .A(data_demux_synth_synth_0[2]),
    .Y(_16_)
  );
  NOR _47_ (
    .A(_16_),
    .B(_05_),
    .Y(_00_[2])
  );
  NOT _48_ (
    .A(data_demux_synth_synth_0[3]),
    .Y(_17_)
  );
  NOR _49_ (
    .A(_17_),
    .B(_05_),
    .Y(_00_[3])
  );
  NOT _50_ (
    .A(data_demux_synth_synth_0[4]),
    .Y(_18_)
  );
  NOR _51_ (
    .A(_18_),
    .B(_05_),
    .Y(_00_[4])
  );
  NOT _52_ (
    .A(data_demux_synth_synth_0[5]),
    .Y(_19_)
  );
  NOR _53_ (
    .A(_19_),
    .B(_05_),
    .Y(_00_[5])
  );
  NOT _54_ (
    .A(data_demux_synth_synth_0[6]),
    .Y(_20_)
  );
  NOR _55_ (
    .A(_20_),
    .B(_05_),
    .Y(_00_[6])
  );
  NOT _56_ (
    .A(data_demux_synth_synth_0[7]),
    .Y(_21_)
  );
  NOR _57_ (
    .A(_21_),
    .B(_05_),
    .Y(_00_[7])
  );
  NOT _58_ (
    .A(valid_demux_synth_synth_1),
    .Y(_22_)
  );
  NOR _59_ (
    .A(_22_),
    .B(_05_),
    .Y(_03_)
  );
  DFF _60_ (
    .C(clk_2f),
    .D(_00_[0]),
    .Q(data_out_0[0])
  );
  DFF _61_ (
    .C(clk_2f),
    .D(_00_[1]),
    .Q(data_out_0[1])
  );
  DFF _62_ (
    .C(clk_2f),
    .D(_00_[2]),
    .Q(data_out_0[2])
  );
  DFF _63_ (
    .C(clk_2f),
    .D(_00_[3]),
    .Q(data_out_0[3])
  );
  DFF _64_ (
    .C(clk_2f),
    .D(_00_[4]),
    .Q(data_out_0[4])
  );
  DFF _65_ (
    .C(clk_2f),
    .D(_00_[5]),
    .Q(data_out_0[5])
  );
  DFF _66_ (
    .C(clk_2f),
    .D(_00_[6]),
    .Q(data_out_0[6])
  );
  DFF _67_ (
    .C(clk_2f),
    .D(_00_[7]),
    .Q(data_out_0[7])
  );
  DFF _68_ (
    .C(clk_2f),
    .D(_01_[0]),
    .Q(data_out_1[0])
  );
  DFF _69_ (
    .C(clk_2f),
    .D(_01_[1]),
    .Q(data_out_1[1])
  );
  DFF _70_ (
    .C(clk_2f),
    .D(_01_[2]),
    .Q(data_out_1[2])
  );
  DFF _71_ (
    .C(clk_2f),
    .D(_01_[3]),
    .Q(data_out_1[3])
  );
  DFF _72_ (
    .C(clk_2f),
    .D(_01_[4]),
    .Q(data_out_1[4])
  );
  DFF _73_ (
    .C(clk_2f),
    .D(_01_[5]),
    .Q(data_out_1[5])
  );
  DFF _74_ (
    .C(clk_2f),
    .D(_01_[6]),
    .Q(data_out_1[6])
  );
  DFF _75_ (
    .C(clk_2f),
    .D(_01_[7]),
    .Q(data_out_1[7])
  );
  DFF _76_ (
    .C(clk_2f),
    .D(_02_),
    .Q(valid_data_out_0)
  );
  DFF _77_ (
    .C(clk_2f),
    .D(_03_),
    .Q(valid_data_out_1)
  );
  (* src = "phy_synth_rx.v:62" *)
  byte_unstripping_synth byte_uns (
    .clk_2f(clk_2f),
    .data_par_0(data_par_0),
    .data_par_1(data_par_1),
    .data_unstripped(data_unstripped),
    .reset_L(reset_L),
    .valid_par_0(valid_par_0),
    .valid_par_1(valid_par_1),
    .valid_unstripped(valid_unstripped)
  );
  (* src = "phy_synth_rx.v:73" *)
  demux_synth_synth demux_synth_synth0 (
    .clk_2f(clk_2f),
    .data_demux_synth_synth_0(data_demux_synth_synth_0),
    .data_demux_synth_synth_1(data_demux_synth_synth_1),
    .data_unstripped(data_unstripped),
    .reset_L(reset_L),
    .valid_demux_synth_synth_0(valid_demux_synth_synth_0),
    .valid_demux_synth_synth_1(valid_demux_synth_synth_1),
    .valid_unstripped(valid_unstripped)
  );
  (* src = "phy_synth_rx.v:44" *)
  serialtopar_synth line0 (
    .clk_8f(clk_8f),
    .clk_f(clk_f),
    .data_par(data_par_0),
    .in(transfer_0),
    .reset_L(reset_L),
    .valid_par(valid_par_0)
  );
  (* src = "phy_synth_rx.v:53" *)
  serialtopar_synth line1 (
    .clk_8f(clk_8f),
    .clk_f(clk_f),
    .data_par(data_par_1),
    .in(transfer_1),
    .reset_L(reset_L),
    .valid_par(valid_par_1)
  );
endmodule

(* src = "phy_synth_tx.v:5" *)
module phy_synth_tx(reset_L, clk_8f, clk_2f, clk_f, valid_data_in_0, valid_data_in_1, data_in_0, data_in_1, transfer_0, transfer_1);
  (* src = "phy_synth_tx.v:38" *)
  wire [7:0] _00_;
  (* src = "phy_synth_tx.v:38" *)
  wire [7:0] _01_;
  (* src = "phy_synth_tx.v:52" *)
  wire _02_;
  (* src = "phy_synth_tx.v:52" *)
  wire _03_;
  (* src = "phy_synth_tx.v:38" *)
  wire _04_;
  (* src = "phy_synth_tx.v:38" *)
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  (* src = "phy_synth_tx.v:8" *)
  input clk_2f;
  (* src = "phy_synth_tx.v:7" *)
  input clk_8f;
  (* src = "phy_synth_tx.v:9" *)
  input clk_f;
  (* src = "phy_synth_tx.v:12" *)
  input [7:0] data_in_0;
  (* src = "phy_synth_tx.v:13" *)
  input [7:0] data_in_1;
  (* src = "phy_synth_tx.v:26" *)
  wire [7:0] data_mux_synth;
  (* src = "phy_synth_tx.v:17" *)
  wire [7:0] data_reg_0;
  (* src = "phy_synth_tx.v:18" *)
  wire [7:0] data_reg_1;
  (* src = "phy_synth_tx.v:27" *)
  wire [7:0] data_stripe_0;
  (* src = "phy_synth_tx.v:28" *)
  wire [7:0] data_stripe_1;
  (* src = "phy_synth_tx.v:35" *)
  wire out_0;
  (* src = "phy_synth_tx.v:36" *)
  wire out_1;
  (* src = "phy_synth_tx.v:6" *)
  input reset_L;
  (* src = "phy_synth_tx.v:14" *)
  output transfer_0;
  (* src = "phy_synth_tx.v:15" *)
  output transfer_1;
  (* src = "phy_synth_tx.v:10" *)
  input valid_data_in_0;
  (* src = "phy_synth_tx.v:11" *)
  input valid_data_in_1;
  (* src = "phy_synth_tx.v:30" *)
  wire valid_mux_synth;
  (* src = "phy_synth_tx.v:19" *)
  wire valid_reg_0;
  (* src = "phy_synth_tx.v:20" *)
  wire valid_reg_1;
  (* src = "phy_synth_tx.v:31" *)
  wire valid_stripe_0;
  (* src = "phy_synth_tx.v:32" *)
  wire valid_stripe_1;
  NOT _27_ (
    .A(out_0),
    .Y(_06_)
  );
  NOT _28_ (
    .A(reset_L),
    .Y(_07_)
  );
  NOR _29_ (
    .A(_07_),
    .B(_06_),
    .Y(_02_)
  );
  NOT _30_ (
    .A(data_in_1[0]),
    .Y(_08_)
  );
  NOR _31_ (
    .A(_08_),
    .B(_07_),
    .Y(_01_[0])
  );
  NOT _32_ (
    .A(data_in_1[1]),
    .Y(_09_)
  );
  NOR _33_ (
    .A(_09_),
    .B(_07_),
    .Y(_01_[1])
  );
  NOT _34_ (
    .A(data_in_1[2]),
    .Y(_10_)
  );
  NOR _35_ (
    .A(_10_),
    .B(_07_),
    .Y(_01_[2])
  );
  NOT _36_ (
    .A(data_in_1[3]),
    .Y(_11_)
  );
  NOR _37_ (
    .A(_11_),
    .B(_07_),
    .Y(_01_[3])
  );
  NOT _38_ (
    .A(data_in_1[4]),
    .Y(_12_)
  );
  NOR _39_ (
    .A(_12_),
    .B(_07_),
    .Y(_01_[4])
  );
  NOT _40_ (
    .A(data_in_1[5]),
    .Y(_13_)
  );
  NOR _41_ (
    .A(_13_),
    .B(_07_),
    .Y(_01_[5])
  );
  NOT _42_ (
    .A(data_in_1[6]),
    .Y(_14_)
  );
  NOR _43_ (
    .A(_14_),
    .B(_07_),
    .Y(_01_[6])
  );
  NOT _44_ (
    .A(data_in_1[7]),
    .Y(_15_)
  );
  NOR _45_ (
    .A(_15_),
    .B(_07_),
    .Y(_01_[7])
  );
  NOT _46_ (
    .A(valid_data_in_1),
    .Y(_16_)
  );
  NOR _47_ (
    .A(_16_),
    .B(_07_),
    .Y(_05_)
  );
  NOT _48_ (
    .A(data_in_0[0]),
    .Y(_17_)
  );
  NOR _49_ (
    .A(_17_),
    .B(_07_),
    .Y(_00_[0])
  );
  NOT _50_ (
    .A(data_in_0[1]),
    .Y(_18_)
  );
  NOR _51_ (
    .A(_18_),
    .B(_07_),
    .Y(_00_[1])
  );
  NOT _52_ (
    .A(data_in_0[2]),
    .Y(_19_)
  );
  NOR _53_ (
    .A(_19_),
    .B(_07_),
    .Y(_00_[2])
  );
  NOT _54_ (
    .A(data_in_0[3]),
    .Y(_20_)
  );
  NOR _55_ (
    .A(_20_),
    .B(_07_),
    .Y(_00_[3])
  );
  NOT _56_ (
    .A(data_in_0[4]),
    .Y(_21_)
  );
  NOR _57_ (
    .A(_21_),
    .B(_07_),
    .Y(_00_[4])
  );
  NOT _58_ (
    .A(data_in_0[5]),
    .Y(_22_)
  );
  NOR _59_ (
    .A(_22_),
    .B(_07_),
    .Y(_00_[5])
  );
  NOT _60_ (
    .A(data_in_0[6]),
    .Y(_23_)
  );
  NOR _61_ (
    .A(_23_),
    .B(_07_),
    .Y(_00_[6])
  );
  NOT _62_ (
    .A(data_in_0[7]),
    .Y(_24_)
  );
  NOR _63_ (
    .A(_24_),
    .B(_07_),
    .Y(_00_[7])
  );
  NOT _64_ (
    .A(valid_data_in_0),
    .Y(_25_)
  );
  NOR _65_ (
    .A(_25_),
    .B(_07_),
    .Y(_04_)
  );
  NOT _66_ (
    .A(out_1),
    .Y(_26_)
  );
  NOR _67_ (
    .A(_26_),
    .B(_07_),
    .Y(_03_)
  );
  DFF _68_ (
    .C(clk_8f),
    .D(_02_),
    .Q(transfer_0)
  );
  DFF _69_ (
    .C(clk_8f),
    .D(_03_),
    .Q(transfer_1)
  );
  DFF _70_ (
    .C(clk_2f),
    .D(_04_),
    .Q(valid_reg_0)
  );
  DFF _71_ (
    .C(clk_2f),
    .D(_00_[0]),
    .Q(data_reg_0[0])
  );
  DFF _72_ (
    .C(clk_2f),
    .D(_00_[1]),
    .Q(data_reg_0[1])
  );
  DFF _73_ (
    .C(clk_2f),
    .D(_00_[2]),
    .Q(data_reg_0[2])
  );
  DFF _74_ (
    .C(clk_2f),
    .D(_00_[3]),
    .Q(data_reg_0[3])
  );
  DFF _75_ (
    .C(clk_2f),
    .D(_00_[4]),
    .Q(data_reg_0[4])
  );
  DFF _76_ (
    .C(clk_2f),
    .D(_00_[5]),
    .Q(data_reg_0[5])
  );
  DFF _77_ (
    .C(clk_2f),
    .D(_00_[6]),
    .Q(data_reg_0[6])
  );
  DFF _78_ (
    .C(clk_2f),
    .D(_00_[7]),
    .Q(data_reg_0[7])
  );
  DFF _79_ (
    .C(clk_2f),
    .D(_05_),
    .Q(valid_reg_1)
  );
  DFF _80_ (
    .C(clk_2f),
    .D(_01_[0]),
    .Q(data_reg_1[0])
  );
  DFF _81_ (
    .C(clk_2f),
    .D(_01_[1]),
    .Q(data_reg_1[1])
  );
  DFF _82_ (
    .C(clk_2f),
    .D(_01_[2]),
    .Q(data_reg_1[2])
  );
  DFF _83_ (
    .C(clk_2f),
    .D(_01_[3]),
    .Q(data_reg_1[3])
  );
  DFF _84_ (
    .C(clk_2f),
    .D(_01_[4]),
    .Q(data_reg_1[4])
  );
  DFF _85_ (
    .C(clk_2f),
    .D(_01_[5]),
    .Q(data_reg_1[5])
  );
  DFF _86_ (
    .C(clk_2f),
    .D(_01_[6]),
    .Q(data_reg_1[6])
  );
  DFF _87_ (
    .C(clk_2f),
    .D(_01_[7]),
    .Q(data_reg_1[7])
  );
  (* src = "phy_synth_tx.v:74" *)
  bs_synth byte (
    .clk_2f(clk_2f),
    .data_mux_synth(data_mux_synth),
    .data_stripe_0(data_stripe_0),
    .data_stripe_1(data_stripe_1),
    .reset_L(reset_L),
    .valid_mux_synth(valid_mux_synth),
    .valid_stripe_0(valid_stripe_0),
    .valid_stripe_1(valid_stripe_1)
  );
  (* src = "phy_synth_tx.v:86" *)
  partoserial_synth line0 (
    .clk_8f(clk_8f),
    .data_stripe(data_stripe_0),
    .out(out_0),
    .reset_L(reset_L),
    .valid_stripe(valid_stripe_0)
  );
  (* src = "phy_synth_tx.v:95" *)
  partoserial_synth line1 (
    .clk_8f(clk_8f),
    .data_stripe(data_stripe_1),
    .out(out_1),
    .reset_L(reset_L),
    .valid_stripe(valid_stripe_1)
  );
  (* src = "phy_synth_tx.v:62" *)
  mux_synth mux_synth0 (
    .clk_2f(clk_2f),
    .data_mux_synth(data_mux_synth),
    .data_reg_0(data_reg_0),
    .data_reg_1(data_reg_1),
    .reset_L(reset_L),
    .valid_mux_synth(valid_mux_synth),
    .valid_reg_0(valid_reg_0),
    .valid_reg_1(valid_reg_1)
  );
endmodule

(* src = "serialtopar_synth.v:9" *)
module serialtopar_synth(data_par, valid_par, clk_f, clk_8f, reset_L, in);
  (* src = "serialtopar_synth.v:28" *)
  wire _000_;
  (* src = "serialtopar_synth.v:28" *)
  wire [2:0] _001_;
  (* src = "serialtopar_synth.v:28" *)
  wire [7:0] _002_;
  (* src = "serialtopar_synth.v:28" *)
  wire [7:0] _003_;
  (* src = "serialtopar_synth.v:28" *)
  wire [2:0] _004_;
  (* src = "serialtopar_synth.v:58" *)
  wire [7:0] _005_;
  (* src = "serialtopar_synth.v:28" *)
  wire _006_;
  (* src = "serialtopar_synth.v:58" *)
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  (* src = "serialtopar_synth.v:17" *)
  wire active;
  (* src = "serialtopar_synth.v:21" *)
  wire [2:0] bc_cnt;
  (* src = "serialtopar_synth.v:19" *)
  wire [7:0] buffer;
  (* src = "serialtopar_synth.v:20" *)
  wire [7:0] buffer2;
  (* src = "serialtopar_synth.v:13" *)
  input clk_8f;
  (* src = "serialtopar_synth.v:12" *)
  input clk_f;
  (* src = "serialtopar_synth.v:22" *)
  wire [2:0] cnt_bits;
  (* src = "serialtopar_synth.v:10" *)
  output [7:0] data_par;
  (* src = "serialtopar_synth.v:15" *)
  input in;
  (* src = "serialtopar_synth.v:14" *)
  input reset_L;
  (* src = "serialtopar_synth.v:23" *)
  wire [7:0] shift_reg;
  (* src = "serialtopar_synth.v:18" *)
  wire valid;
  (* src = "serialtopar_synth.v:11" *)
  output valid_par;
  NOT _075_ (
    .A(valid),
    .Y(_046_)
  );
  NOT _076_ (
    .A(reset_L),
    .Y(_047_)
  );
  NOR _077_ (
    .A(_047_),
    .B(_046_),
    .Y(_007_)
  );
  NOT _078_ (
    .A(buffer2[0]),
    .Y(_048_)
  );
  NOR _079_ (
    .A(_048_),
    .B(_047_),
    .Y(_005_[0])
  );
  NOT _080_ (
    .A(buffer2[1]),
    .Y(_049_)
  );
  NOR _081_ (
    .A(_049_),
    .B(_047_),
    .Y(_005_[1])
  );
  NOT _082_ (
    .A(buffer2[2]),
    .Y(_050_)
  );
  NOR _083_ (
    .A(_050_),
    .B(_047_),
    .Y(_005_[2])
  );
  NOT _084_ (
    .A(buffer2[3]),
    .Y(_051_)
  );
  NOR _085_ (
    .A(_051_),
    .B(_047_),
    .Y(_005_[3])
  );
  NOT _086_ (
    .A(buffer2[4]),
    .Y(_052_)
  );
  NOR _087_ (
    .A(_052_),
    .B(_047_),
    .Y(_005_[4])
  );
  NOT _088_ (
    .A(buffer2[5]),
    .Y(_053_)
  );
  NOR _089_ (
    .A(_053_),
    .B(_047_),
    .Y(_005_[5])
  );
  NOT _090_ (
    .A(buffer2[6]),
    .Y(_054_)
  );
  NOR _091_ (
    .A(_054_),
    .B(_047_),
    .Y(_005_[6])
  );
  NOT _092_ (
    .A(buffer2[7]),
    .Y(_055_)
  );
  NOR _093_ (
    .A(_055_),
    .B(_047_),
    .Y(_005_[7])
  );
  NOR _094_ (
    .A(active),
    .B(bc_cnt[2]),
    .Y(_056_)
  );
  NOR _095_ (
    .A(_056_),
    .B(_047_),
    .Y(_000_)
  );
  NOR _096_ (
    .A(_047_),
    .B(cnt_bits[0]),
    .Y(_004_[0])
  );
  NAND _097_ (
    .A(cnt_bits[1]),
    .B(cnt_bits[0]),
    .Y(_057_)
  );
  NOT _098_ (
    .A(_057_),
    .Y(_058_)
  );
  NOR _099_ (
    .A(cnt_bits[1]),
    .B(cnt_bits[0]),
    .Y(_059_)
  );
  NOT _100_ (
    .A(_059_),
    .Y(_060_)
  );
  NAND _101_ (
    .A(_060_),
    .B(reset_L),
    .Y(_061_)
  );
  NOR _102_ (
    .A(_061_),
    .B(_058_),
    .Y(_004_[1])
  );
  NOT _103_ (
    .A(cnt_bits[2]),
    .Y(_062_)
  );
  NOR _104_ (
    .A(_057_),
    .B(_062_),
    .Y(_063_)
  );
  NAND _105_ (
    .A(_057_),
    .B(_062_),
    .Y(_064_)
  );
  NAND _106_ (
    .A(_064_),
    .B(reset_L),
    .Y(_065_)
  );
  NOR _107_ (
    .A(_065_),
    .B(_063_),
    .Y(_004_[2])
  );
  NOT _108_ (
    .A(buffer[2]),
    .Y(_066_)
  );
  NOT _109_ (
    .A(buffer[3]),
    .Y(_067_)
  );
  NOR _110_ (
    .A(_067_),
    .B(_066_),
    .Y(_068_)
  );
  NOT _111_ (
    .A(buffer[4]),
    .Y(_069_)
  );
  NOT _112_ (
    .A(buffer[6]),
    .Y(_070_)
  );
  NOR _113_ (
    .A(_070_),
    .B(_069_),
    .Y(_071_)
  );
  NAND _114_ (
    .A(_071_),
    .B(_068_),
    .Y(_072_)
  );
  NOR _115_ (
    .A(buffer[0]),
    .B(in),
    .Y(_073_)
  );
  NOT _116_ (
    .A(buffer[1]),
    .Y(_074_)
  );
  NOR _117_ (
    .A(_074_),
    .B(buffer[5]),
    .Y(_008_)
  );
  NAND _118_ (
    .A(_008_),
    .B(_073_),
    .Y(_009_)
  );
  NOR _119_ (
    .A(_009_),
    .B(_072_),
    .Y(_010_)
  );
  NAND _120_ (
    .A(_010_),
    .B(bc_cnt[0]),
    .Y(_011_)
  );
  NOT _121_ (
    .A(_011_),
    .Y(_012_)
  );
  NOT _122_ (
    .A(bc_cnt[0]),
    .Y(_013_)
  );
  NOT _123_ (
    .A(_010_),
    .Y(_014_)
  );
  NAND _124_ (
    .A(_014_),
    .B(_013_),
    .Y(_015_)
  );
  NAND _125_ (
    .A(_015_),
    .B(reset_L),
    .Y(_016_)
  );
  NOR _126_ (
    .A(_016_),
    .B(_012_),
    .Y(_001_[0])
  );
  NOT _127_ (
    .A(bc_cnt[1]),
    .Y(_017_)
  );
  NOR _128_ (
    .A(_011_),
    .B(_017_),
    .Y(_018_)
  );
  NAND _129_ (
    .A(_011_),
    .B(_017_),
    .Y(_019_)
  );
  NAND _130_ (
    .A(_019_),
    .B(reset_L),
    .Y(_020_)
  );
  NOR _131_ (
    .A(_020_),
    .B(_018_),
    .Y(_001_[1])
  );
  NOR _132_ (
    .A(_018_),
    .B(bc_cnt[2]),
    .Y(_021_)
  );
  NAND _133_ (
    .A(_018_),
    .B(bc_cnt[2]),
    .Y(_022_)
  );
  NAND _134_ (
    .A(_022_),
    .B(reset_L),
    .Y(_023_)
  );
  NOR _135_ (
    .A(_023_),
    .B(_021_),
    .Y(_001_[2])
  );
  NAND _136_ (
    .A(_059_),
    .B(_062_),
    .Y(_024_)
  );
  NOR _137_ (
    .A(_024_),
    .B(in),
    .Y(_025_)
  );
  NOR _138_ (
    .A(_024_),
    .B(_047_),
    .Y(_026_)
  );
  NOR _139_ (
    .A(_026_),
    .B(_005_[0]),
    .Y(_027_)
  );
  NOR _140_ (
    .A(_027_),
    .B(_025_),
    .Y(_002_[0])
  );
  NOR _141_ (
    .A(_024_),
    .B(buffer[0]),
    .Y(_028_)
  );
  NOR _142_ (
    .A(_026_),
    .B(_005_[1]),
    .Y(_029_)
  );
  NOR _143_ (
    .A(_029_),
    .B(_028_),
    .Y(_002_[1])
  );
  NOR _144_ (
    .A(_024_),
    .B(buffer[1]),
    .Y(_030_)
  );
  NOR _145_ (
    .A(_026_),
    .B(_005_[2]),
    .Y(_031_)
  );
  NOR _146_ (
    .A(_031_),
    .B(_030_),
    .Y(_002_[2])
  );
  NOR _147_ (
    .A(_024_),
    .B(buffer[2]),
    .Y(_032_)
  );
  NOR _148_ (
    .A(_026_),
    .B(_005_[3]),
    .Y(_033_)
  );
  NOR _149_ (
    .A(_033_),
    .B(_032_),
    .Y(_002_[3])
  );
  NOR _150_ (
    .A(_024_),
    .B(buffer[3]),
    .Y(_034_)
  );
  NOR _151_ (
    .A(_026_),
    .B(_005_[4]),
    .Y(_035_)
  );
  NOR _152_ (
    .A(_035_),
    .B(_034_),
    .Y(_002_[4])
  );
  NOR _153_ (
    .A(_024_),
    .B(buffer[4]),
    .Y(_036_)
  );
  NOR _154_ (
    .A(_026_),
    .B(_005_[5]),
    .Y(_037_)
  );
  NOR _155_ (
    .A(_037_),
    .B(_036_),
    .Y(_002_[5])
  );
  NOR _156_ (
    .A(_024_),
    .B(buffer[5]),
    .Y(_038_)
  );
  NOR _157_ (
    .A(_026_),
    .B(_005_[6]),
    .Y(_039_)
  );
  NOR _158_ (
    .A(_039_),
    .B(_038_),
    .Y(_002_[6])
  );
  NOR _159_ (
    .A(_024_),
    .B(buffer[6]),
    .Y(_040_)
  );
  NOR _160_ (
    .A(_026_),
    .B(_005_[7]),
    .Y(_041_)
  );
  NOR _161_ (
    .A(_041_),
    .B(_040_),
    .Y(_002_[7])
  );
  NOT _162_ (
    .A(in),
    .Y(_042_)
  );
  NOR _163_ (
    .A(_047_),
    .B(_042_),
    .Y(_003_[0])
  );
  NOT _164_ (
    .A(buffer[0]),
    .Y(_043_)
  );
  NOR _165_ (
    .A(_047_),
    .B(_043_),
    .Y(_003_[1])
  );
  NOR _166_ (
    .A(_074_),
    .B(_047_),
    .Y(_003_[2])
  );
  NOR _167_ (
    .A(_066_),
    .B(_047_),
    .Y(_003_[3])
  );
  NOR _168_ (
    .A(_067_),
    .B(_047_),
    .Y(_003_[4])
  );
  NOR _169_ (
    .A(_069_),
    .B(_047_),
    .Y(_003_[5])
  );
  NOT _170_ (
    .A(buffer[5]),
    .Y(_044_)
  );
  NOR _171_ (
    .A(_047_),
    .B(_044_),
    .Y(_003_[6])
  );
  NOT _172_ (
    .A(_000_),
    .Y(_045_)
  );
  NOR _173_ (
    .A(_010_),
    .B(_045_),
    .Y(_006_)
  );
  DFF _174_ (
    .C(clk_f),
    .D(_005_[0]),
    .Q(data_par[0])
  );
  DFF _175_ (
    .C(clk_f),
    .D(_005_[1]),
    .Q(data_par[1])
  );
  DFF _176_ (
    .C(clk_f),
    .D(_005_[2]),
    .Q(data_par[2])
  );
  DFF _177_ (
    .C(clk_f),
    .D(_005_[3]),
    .Q(data_par[3])
  );
  DFF _178_ (
    .C(clk_f),
    .D(_005_[4]),
    .Q(data_par[4])
  );
  DFF _179_ (
    .C(clk_f),
    .D(_005_[5]),
    .Q(data_par[5])
  );
  DFF _180_ (
    .C(clk_f),
    .D(_005_[6]),
    .Q(data_par[6])
  );
  DFF _181_ (
    .C(clk_f),
    .D(_005_[7]),
    .Q(data_par[7])
  );
  DFF _182_ (
    .C(clk_f),
    .D(_007_),
    .Q(valid_par)
  );
  DFF _183_ (
    .C(clk_8f),
    .D(_000_),
    .Q(active)
  );
  DFF _184_ (
    .C(clk_8f),
    .D(_006_),
    .Q(valid)
  );
  DFF _185_ (
    .C(clk_8f),
    .D(_003_[0]),
    .Q(buffer[0])
  );
  DFF _186_ (
    .C(clk_8f),
    .D(_003_[1]),
    .Q(buffer[1])
  );
  DFF _187_ (
    .C(clk_8f),
    .D(_003_[2]),
    .Q(buffer[2])
  );
  DFF _188_ (
    .C(clk_8f),
    .D(_003_[3]),
    .Q(buffer[3])
  );
  DFF _189_ (
    .C(clk_8f),
    .D(_003_[4]),
    .Q(buffer[4])
  );
  DFF _190_ (
    .C(clk_8f),
    .D(_003_[5]),
    .Q(buffer[5])
  );
  DFF _191_ (
    .C(clk_8f),
    .D(_003_[6]),
    .Q(buffer[6])
  );
  DFF _192_ (
    .C(clk_8f),
    .D(_002_[0]),
    .Q(buffer2[0])
  );
  DFF _193_ (
    .C(clk_8f),
    .D(_002_[1]),
    .Q(buffer2[1])
  );
  DFF _194_ (
    .C(clk_8f),
    .D(_002_[2]),
    .Q(buffer2[2])
  );
  DFF _195_ (
    .C(clk_8f),
    .D(_002_[3]),
    .Q(buffer2[3])
  );
  DFF _196_ (
    .C(clk_8f),
    .D(_002_[4]),
    .Q(buffer2[4])
  );
  DFF _197_ (
    .C(clk_8f),
    .D(_002_[5]),
    .Q(buffer2[5])
  );
  DFF _198_ (
    .C(clk_8f),
    .D(_002_[6]),
    .Q(buffer2[6])
  );
  DFF _199_ (
    .C(clk_8f),
    .D(_002_[7]),
    .Q(buffer2[7])
  );
  DFF _200_ (
    .C(clk_8f),
    .D(_001_[0]),
    .Q(bc_cnt[0])
  );
  DFF _201_ (
    .C(clk_8f),
    .D(_001_[1]),
    .Q(bc_cnt[1])
  );
  DFF _202_ (
    .C(clk_8f),
    .D(_001_[2]),
    .Q(bc_cnt[2])
  );
  DFF _203_ (
    .C(clk_8f),
    .D(_004_[0]),
    .Q(cnt_bits[0])
  );
  DFF _204_ (
    .C(clk_8f),
    .D(_004_[1]),
    .Q(cnt_bits[1])
  );
  DFF _205_ (
    .C(clk_8f),
    .D(_004_[2]),
    .Q(cnt_bits[2])
  );
  assign shift_reg = { buffer[6:0], in };
endmodule
