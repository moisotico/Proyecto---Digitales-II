`include "gen_clk.v"
`include "mux.v"
`include "bs.v"
`include "partoserial.v"
module phy_tx(
    input reset_L,
    input clk_8f,
    input enable,
    input valid_data_0,
    input valid_data_1,
    input [7:0]data_in_0,
    input [7:0]data_in_1,
    output reg tx_out_0,
    output reg tx_out_1);

// reg[7:0]        data_reg_0;
// reg[7:0]        data_reg_1;
// reg             valid_reg_0;
// reg             valid_reg_1;

//Wires
/*AUTOREG*/
/*AUTOWIRE*/
wire clk_2f;
wire clk_f;
wire out_0;
wire out_1;

always @(posedge clk_2f) begin
    if(~reset_L) begin
        data_reg_0 <= 0;
        data_reg_1 <= 0;
    end else begin
        data_reg_0 <= data_in_0;
        data_reg_1 <= data_in_1;
    end
end

always @(posedge clk_8f) begin
    if(~reset_L) begin
        tx_out_0 <= 0;
        tx_out_1 <= 0;
    end else begin
        tx_out_0 <= out_0;
        tx_out_1 <= out_1;
    end
end

gen_clk clocks (/*autoinst*/
            .clk_2f(clk_2f),
            .clk_f(clk_f),
            .clk_8f(clk_8f),
            .enable(enable));
mux mux0 (/*autoinst*/
          .data_mux(data_mux[7:0]),
          .valid_mux(valid_mux),
          .clk_2f(clk_2f),
          .reset_L(reset_L),
          .valid_reg_0(valid_reg_0),
          .data_reg_0(data_reg_0[7:0]),
          .valid_reg_1(valid_reg_1),
          .data_reg_1(data_reg_1[7:0]));

bs byte (/*autoinst*/
           .data_stripe_0(data_stripe_0[7:0]),
           .valid_stripe_0(valid_stripe_0),
           .data_stripe_1(data_stripe_1[7:0]),
           .valid_stripe_1(valid_stripe_1),
           .data_mux(data_mux[7:0]),
           .valid_mux(valid_mux),
           .reset_L(reset_L),
           .clk_2f(clk_2f));

partoserial line0 (/*autoinst*/
         .out(out_0),
         .data_stripe(data_stripe_0[7:0]),
         .valid_stripe(valid_stripe_0),
         .reset_L(reset_L),
         .clk_8f(clk_8f));

partoserial line1 (/*autoinst*/
         .out(out_1),
         .data_stripe(data_stripe_1[7:0]),
         .valid_stripe(valid_stripe_1),
         .reset_L(reset_L),
         .clk_8f(clk_8f));
endmodule