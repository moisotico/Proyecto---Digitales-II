/* Generated by Yosys 0.8 (git sha1 UNKNOWN, clang 6.0.0-1ubuntu2 -fPIC -Os) */

(* top =  1  *)
(* src = "serialtopar_synth.v:9" *)
module serialtopar_synth(data_out, valid_out, clk_f, clk_8f, reset_L, data_in);
  (* src = "serialtopar_synth.v:34" *)
  wire _00_;
  (* src = "serialtopar_synth.v:34" *)
  wire [2:0] _01_;
  (* src = "serialtopar_synth.v:24" *)
  wire [7:0] _02_;
  (* src = "serialtopar_synth.v:34" *)
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  (* src = "serialtopar_synth.v:17" *)
  wire active;
  (* src = "serialtopar_synth.v:19" *)
  wire [2:0] bc_cnt;
  (* src = "serialtopar_synth.v:18" *)
  wire [7:0] buffer;
  (* src = "serialtopar_synth.v:13" *)
  input clk_8f;
  (* src = "serialtopar_synth.v:12" *)
  input clk_f;
  (* src = "serialtopar_synth.v:15" *)
  input data_in;
  (* src = "serialtopar_synth.v:10" *)
  output [7:0] data_out;
  (* src = "serialtopar_synth.v:14" *)
  input reset_L;
  (* src = "serialtopar_synth.v:20" *)
  wire [7:0] shift_reg;
  (* src = "serialtopar_synth.v:11" *)
  output valid_out;
  NOT _35_ (
    .A(reset_L),
    .Y(_04_)
  );
  NOT _36_ (
    .A(valid_out),
    .Y(_05_)
  );
  NOT _37_ (
    .A(buffer[3]),
    .Y(_06_)
  );
  NOR _38_ (
    .A(bc_cnt[2]),
    .B(active),
    .Y(_07_)
  );
  NOR _39_ (
    .A(_04_),
    .B(_07_),
    .Y(_00_)
  );
  NAND _40_ (
    .A(buffer[4]),
    .B(buffer[5]),
    .Y(_08_)
  );
  NAND _41_ (
    .A(buffer[6]),
    .B(data_in),
    .Y(_09_)
  );
  NOR _42_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NOT _43_ (
    .A(_10_),
    .Y(_11_)
  );
  NOR _44_ (
    .A(buffer[1]),
    .B(buffer[2]),
    .Y(_12_)
  );
  NOR _45_ (
    .A(buffer[7]),
    .B(_06_),
    .Y(_13_)
  );
  NAND _46_ (
    .A(_12_),
    .B(_13_),
    .Y(_14_)
  );
  NOR _47_ (
    .A(_11_),
    .B(_14_),
    .Y(_15_)
  );
  NAND _48_ (
    .A(reset_L),
    .B(_15_),
    .Y(_16_)
  );
  NOR _49_ (
    .A(bc_cnt[0]),
    .B(_16_),
    .Y(_01_[0])
  );
  NOR _50_ (
    .A(bc_cnt[0]),
    .B(bc_cnt[1]),
    .Y(_17_)
  );
  NOT _51_ (
    .A(_17_),
    .Y(_18_)
  );
  NAND _52_ (
    .A(bc_cnt[0]),
    .B(bc_cnt[1]),
    .Y(_19_)
  );
  NAND _53_ (
    .A(_18_),
    .B(_19_),
    .Y(_20_)
  );
  NOR _54_ (
    .A(_16_),
    .B(_20_),
    .Y(_01_[1])
  );
  NAND _55_ (
    .A(bc_cnt[2]),
    .B(_19_),
    .Y(_21_)
  );
  NOT _56_ (
    .A(_21_),
    .Y(_22_)
  );
  NOR _57_ (
    .A(bc_cnt[2]),
    .B(_19_),
    .Y(_23_)
  );
  NOR _58_ (
    .A(_22_),
    .B(_23_),
    .Y(_24_)
  );
  NOR _59_ (
    .A(_16_),
    .B(_24_),
    .Y(_01_[2])
  );
  NAND _60_ (
    .A(_05_),
    .B(_07_),
    .Y(_25_)
  );
  NAND _61_ (
    .A(reset_L),
    .B(_25_),
    .Y(_26_)
  );
  NOR _62_ (
    .A(_15_),
    .B(_26_),
    .Y(_03_)
  );
  NAND _63_ (
    .A(buffer[1]),
    .B(reset_L),
    .Y(_27_)
  );
  NOT _64_ (
    .A(_27_),
    .Y(_02_[0])
  );
  NAND _65_ (
    .A(buffer[2]),
    .B(reset_L),
    .Y(_28_)
  );
  NOT _66_ (
    .A(_28_),
    .Y(_02_[1])
  );
  NAND _67_ (
    .A(reset_L),
    .B(buffer[3]),
    .Y(_29_)
  );
  NOT _68_ (
    .A(_29_),
    .Y(_02_[2])
  );
  NAND _69_ (
    .A(reset_L),
    .B(buffer[4]),
    .Y(_30_)
  );
  NOT _70_ (
    .A(_30_),
    .Y(_02_[3])
  );
  NAND _71_ (
    .A(reset_L),
    .B(buffer[5]),
    .Y(_31_)
  );
  NOT _72_ (
    .A(_31_),
    .Y(_02_[4])
  );
  NAND _73_ (
    .A(reset_L),
    .B(buffer[6]),
    .Y(_32_)
  );
  NOT _74_ (
    .A(_32_),
    .Y(_02_[5])
  );
  NAND _75_ (
    .A(buffer[7]),
    .B(reset_L),
    .Y(_33_)
  );
  NOT _76_ (
    .A(_33_),
    .Y(_02_[6])
  );
  NAND _77_ (
    .A(reset_L),
    .B(data_in),
    .Y(_34_)
  );
  NOT _78_ (
    .A(_34_),
    .Y(_02_[7])
  );
  (* src = "serialtopar_synth.v:34" *)
  DFF _79_ (
    .C(clk_f),
    .D(_02_[0]),
    .Q(data_out[0])
  );
  (* src = "serialtopar_synth.v:34" *)
  DFF _80_ (
    .C(clk_f),
    .D(_02_[1]),
    .Q(data_out[1])
  );
  (* src = "serialtopar_synth.v:34" *)
  DFF _81_ (
    .C(clk_f),
    .D(_02_[2]),
    .Q(data_out[2])
  );
  (* src = "serialtopar_synth.v:34" *)
  DFF _82_ (
    .C(clk_f),
    .D(_02_[3]),
    .Q(data_out[3])
  );
  (* src = "serialtopar_synth.v:34" *)
  DFF _83_ (
    .C(clk_f),
    .D(_02_[4]),
    .Q(data_out[4])
  );
  (* src = "serialtopar_synth.v:34" *)
  DFF _84_ (
    .C(clk_f),
    .D(_02_[5]),
    .Q(data_out[5])
  );
  (* src = "serialtopar_synth.v:34" *)
  DFF _85_ (
    .C(clk_f),
    .D(_02_[6]),
    .Q(data_out[6])
  );
  (* src = "serialtopar_synth.v:34" *)
  DFF _86_ (
    .C(clk_f),
    .D(_02_[7]),
    .Q(data_out[7])
  );
  (* src = "serialtopar_synth.v:34" *)
  DFF _87_ (
    .C(clk_f),
    .D(_03_),
    .Q(valid_out)
  );
  (* src = "serialtopar_synth.v:34" *)
  DFF _88_ (
    .C(clk_f),
    .D(_00_),
    .Q(active)
  );
  (* src = "serialtopar_synth.v:34" *)
  DFF _89_ (
    .C(clk_f),
    .D(_01_[0]),
    .Q(bc_cnt[0])
  );
  (* src = "serialtopar_synth.v:34" *)
  DFF _90_ (
    .C(clk_f),
    .D(_01_[1]),
    .Q(bc_cnt[1])
  );
  (* src = "serialtopar_synth.v:34" *)
  DFF _91_ (
    .C(clk_f),
    .D(_01_[2]),
    .Q(bc_cnt[2])
  );
  (* src = "serialtopar_synth.v:24" *)
  DFF _92_ (
    .C(clk_8f),
    .D(_02_[1]),
    .Q(buffer[1])
  );
  (* src = "serialtopar_synth.v:24" *)
  DFF _93_ (
    .C(clk_8f),
    .D(_02_[2]),
    .Q(buffer[2])
  );
  (* src = "serialtopar_synth.v:24" *)
  DFF _94_ (
    .C(clk_8f),
    .D(_02_[3]),
    .Q(buffer[3])
  );
  (* src = "serialtopar_synth.v:24" *)
  DFF _95_ (
    .C(clk_8f),
    .D(_02_[4]),
    .Q(buffer[4])
  );
  (* src = "serialtopar_synth.v:24" *)
  DFF _96_ (
    .C(clk_8f),
    .D(_02_[5]),
    .Q(buffer[5])
  );
  (* src = "serialtopar_synth.v:24" *)
  DFF _97_ (
    .C(clk_8f),
    .D(_02_[6]),
    .Q(buffer[6])
  );
  (* src = "serialtopar_synth.v:24" *)
  DFF _98_ (
    .C(clk_8f),
    .D(_02_[7]),
    .Q(buffer[7])
  );
  assign shift_reg = { data_in, buffer[7:1] };
endmodule
